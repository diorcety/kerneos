<?xml version = "1.0" encoding = "utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - Kerneos
     - Copyright (C) 2011 Bull S.A.S.
     - Contact: jasmine AT ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - $Id$
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<s:ToggleButton xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:s="library://ns.adobe.com/flex/spark"
                label="{window.module.name}"
                toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.windows.taskbar.label',[window.module.name])}"
                doubleClickEnabled="true"
                click="simpleClickHandler(event)"
                doubleClick="doubleClickHandler(event)"
                toolTipCreate="createSnapshotToolTip(event)"
                toolTipShow="positionToolTip(event)"
                mouseOver="updateSnapshot(event)"
                icon="{window.module.getSmallIcon()}">

    <fx:Metadata>
        <![CDATA[
        ]]>
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
        import flexlib.mdi.containers.MDIWindow;
        import flexlib.mdi.events.MDIWindowEvent;

        import mx.core.UIComponent;
        import mx.effects.Fade;
        import mx.effects.Glow;
        import mx.effects.Sequence;
        import mx.events.ToolTipEvent;
        import mx.graphics.ImageSnapshot;
        import mx.resources.ResourceManager;

        import org.ow2.kerneos.common.managers.LanguagesManager;

        // =========================================================================
        // Variables
        // =========================================================================

        /**
         * The default displayed snapshot width.
         */
        public static var SNAPSHOT_WIDTH:Number = 300;

        /**
         * The corresponding module window.
         */
        private var _moduleWindow:ModuleWindow;

        [Bindable]
        public function get window():ModuleWindow {
            return _moduleWindow;
        }

        public function set window(window:ModuleWindow):void {
            if (_moduleWindow != null) {
                // Remove events listener
                _moduleWindow.removeEventListener(MDIWindowEvent.RESTORE, windowRestoreHandler);
                _moduleWindow.removeEventListener(MDIWindowEvent.FOCUS_START, windowFocusStartHandler);
                _moduleWindow.removeEventListener(MDIWindowEvent.MINIMIZE, windowMinimizeHandler);
                _moduleWindow.removeEventListener(MDIWindowEvent.FOCUS_END, windowFocusEndHandler);

            }
            _moduleWindow = window;
            if (_moduleWindow != null) {
                // Add events listener
                _moduleWindow.addEventListener(MDIWindowEvent.RESTORE, windowRestoreHandler);
                _moduleWindow.addEventListener(MDIWindowEvent.FOCUS_START, windowFocusStartHandler);
                _moduleWindow.addEventListener(MDIWindowEvent.MINIMIZE, windowMinimizeHandler);
                _moduleWindow.addEventListener(MDIWindowEvent.FOCUS_END, windowFocusEndHandler);
            }
        }

        /**
         * A snapshot of the attached window.
         */
        protected var snapshot:ImageSnapshot;

        /**
         * Wether the snapshot is marked as obsolete.
         */
        protected var snapshotObsolete:Boolean = true;


        // =========================================================================
        // Public methods
        // =========================================================================

        /**
         * Flash the button.
         */
        public function flash(color:uint):void {
            var effect:Glow = new Glow();
            effect.blurXTo = 50;
            effect.blurXFrom = 0;
            effect.blurYFrom = 0;
            effect.blurYTo = 15;
            effect.strength = 5;
            effect.duration = 300;
            effect.color = color;
            effect.repeatCount = 3;
            effect.play([this]);
        }


        /**
         * Blink the button.
         */
        public function blink():void {
            var fadeIn:Fade = new Fade();
            fadeIn.alphaFrom = 0;
            fadeIn.alphaTo = 1;
            fadeIn.duration = 200;

            var fadeOut:Fade = new Fade();
            fadeOut.alphaFrom = 1;
            fadeOut.alphaTo = 0;
            fadeOut.duration = 200;

            var effect:Sequence = new Sequence();
            effect.addChild(fadeOut);
            effect.addChild(fadeIn);
            effect.repeatCount = 3;

            effect.play([this]);
        }


        // =========================================================================
        // Button click events handlers
        // =========================================================================

        /**
         * When the button is simple clicked.
         */
        protected function simpleClickHandler(e:MouseEvent):void {
            // If the window has focus, minimize it
            if (!_moduleWindow.minimized) {
                if (_moduleWindow.hasFocus) {
                    //_moduleWindow.minimize();
                }
                else {
                    _moduleWindow.windowManager.bringToFront(_moduleWindow as MDIWindow);
                }
            }
            else {
                // If the window is minimized, restore it
                if (_moduleWindow.minimized) {
                    _moduleWindow.unMinimize();
                }
                // Bring it to front
                _moduleWindow.windowManager.bringToFront(_moduleWindow as MDIWindow);
            }

            e.preventDefault();
        }


        /**
         * When the button is double clicked.
         */
        protected function doubleClickHandler(e:MouseEvent):void {
            if (!_moduleWindow.maximized) {
                // Maximize it
                _moduleWindow.maximize();
            }

            e.preventDefault();
        }


        // =========================================================================
        // Window events handler
        // =========================================================================

        /**
         * When the window is restored.
         */
        protected function windowRestoreHandler(e:Event = null):void {
            windowFocusStartHandler();
        }


        /**
         * When the window gets the focus.
         */
        protected function windowFocusStartHandler(e:Event = null):void {
            selected = true;
        }

        /**
         * When the window is minimized.
         */
        protected function windowMinimizeHandler(e:Event = null):void {
            windowFocusEndHandler();
        }

        /**
         * When the window loses the focus.
         */
        protected function windowFocusEndHandler(e:Event = null):void {
            snapshotObsolete = true;
            selected = false;
        }


        // =========================================================================
        // Window snapshot ToolTip
        // =========================================================================

        /**
         * Update the window snapshot.
         */
        public function updateSnapshot(e:Event = null):void {
            // Don't take the snapshot if it is not obsolete, the window is minimized or this is an
            // IFrame window.
            if (snapshotObsolete && !_moduleWindow.minimized && !(_moduleWindow is IFrameModuleWindow)) {
                snapshot = ImageSnapshot.captureImage(_moduleWindow);
                snapshotObsolete = false;
            }
        }


        /**
         * Position the ToolTip.
         */
        protected function positionToolTip(e:ToolTipEvent):void {
            var targetPoint:Point = ((this as UIComponent).parent as UIComponent).contentToGlobal(new Point(this.x, this.y));
            e.toolTip.x = Math.max(2, (targetPoint.x + this.width / 2) - e.toolTip.width / 2);
            e.toolTip.y = targetPoint.y - e.toolTip.height - 4;
        }


        /**
         * Create a window snapshot ToolTip.
         */
        protected function createSnapshotToolTip(event:ToolTipEvent):void {
            if (snapshot != null) {
                var ptt:ModuleSnapshotTooltip = new ModuleSnapshotTooltip();
                ptt.text = _moduleWindow.module.name;
                ptt.bitmapData = snapshot.data;
                ptt.snapshotWidth = SNAPSHOT_WIDTH;
                ptt.snapshotHeight = SNAPSHOT_WIDTH * snapshot.height / snapshot.width;
                event.toolTip = ptt;
            }
        }
        ]]>
    </fx:Script>

</s:ToggleButton>
