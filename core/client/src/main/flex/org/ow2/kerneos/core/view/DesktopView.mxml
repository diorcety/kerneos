<?xml version = "1.0" encoding = "utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - JASMINe
     - Copyright (C) 2008 Bull S.A.S.
     - Contact: jasmine AT ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - $Id$
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:view="org.ow2.kerneos.core.view.*"
         xmlns:commonView="org.ow2.kerneos.common.view.*"
         xmlns:flexlibMdiContainers="flexlib.mdi.containers.*"
         creationComplete="creationCompleteHandler()"
         verticalGap="1">

    <fx:Metadata>
        <![CDATA[
        /**
         * The desktop view displayed when everything is loaded and OK.
         *
         * @author Julien Nicoulaud
         * @author Guillaume Renault
         */
        ]]>
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.collections.ArrayCollection;
        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.core.FlexGlobals;
        import mx.core.UIComponent;
        import mx.events.CollectionEvent;
        import mx.resources.ResourceManager;
        import mx.controls.Alert;
        import mx.events.CloseEvent;

        import flexlib.mdi.containers.MDIWindow;
        import flexlib.mdi.events.MDIManagerEvent;
        import flexlib.mdi.events.MDIWindowEvent;

        import org.ow2.kerneos.common.util.IconUtility;

        import org.ow2.kerneos.core.api.KerneosModule;
        import org.ow2.kerneos.core.managers.KerneosLifeCycleManager;
        import org.ow2.kerneos.core.managers.LanguagesManager;
        import org.ow2.kerneos.core.managers.NotificationsManager;
        import org.ow2.kerneos.core.managers.ModulesLifeCycleManager;
        import org.ow2.kerneos.core.managers.SharedObjectManager;
        import org.ow2.kerneos.core.model.KerneosModelLocator;
        import org.ow2.kerneos.core.model.KerneosState;
        import org.ow2.kerneos.core.view.notification.NotificationPopUp;
        import org.ow2.kerneos.core.view.window.SwfModuleWindow;
        import org.ow2.kerneos.core.view.window.KerneosWindow;
        import org.ow2.kerneos.core.view.window.ModuleWindow;
        import org.ow2.kerneos.core.view.notification.NotificationsLog;
        import org.ow2.kerneos.core.vo.KerneosNotification;
        import org.ow2.kerneos.core.vo.ModuleVO;
        import org.ow2.kerneos.core.vo.PromptBeforeCloseVO;
        import org.ow2.kerneos.login.model.LoginModelLocator;
        import org.ow2.kerneos.login.vo.SessionVO;
        import org.ow2.kerneos.profile.manager.ProfileManager;
        import org.ow2.kerneos.profile.model.ProfileModelLocator;
        import org.ow2.kerneos.profile.vo.ProfileVO;

        // =========================================================================
        // Variables
        // =========================================================================

        // Assets

        /**
         * Minimize all windows icon.
         */
        [Embed(source="/../assets/down.png")]
        [Bindable]
        private var downIcon:Class;

        /**
         * Cascade windows icon.
         */
        [Embed(source="/../assets/cascade.png")]
        [Bindable]
        private var cascadeIcon:Class;

        /**
         * Tile windows icon.
         */
        [Embed(source="/../assets/tile.png")]
        [Bindable]
        private var tileIcon:Class;

        /**
         * Events icon.
         */
        [Embed(source="/../assets/events_list16.png")]
        [Bindable]
        private var eventsIcon:Class;

        /**
         * Log out icon.
         */
        [Embed(source="/../assets/exit.png")]
        [Bindable]
        private var logoutIcon:Class;

        /**
         * Icon for the en_US locale.
         */
        [Embed(source="/../assets/en_US.png")]
        [Bindable]
        public var en_USIcon:Class;

        /**
         * Icon for the fr_FR locale.
         */
        [Embed(source="/../assets/fr_FR.png")]
        [Bindable]
        public var fr_FRIcon:Class;

        // Variables

        /**
         * The application model
         */
        [Bindable]
        private var model:KerneosModelLocator;

        /**
         * Potential window manager queued event
         * @see closeWindow()
         */
        private var queuedEvent:MDIManagerEvent;

        /**
         * The actual available and supported languages.
         */
        [Bindable]
        private var locales:Array = [
            {locale: "fr_FR", label: "FranÃ§ais", icon: fr_FRIcon},
            {locale: "en_US", label: "English", icon: en_USIcon}
        ];

        /**
         * The notifications log window
         */
        private var notificationsLogWindow:KerneosWindow = null;


        // =========================================================================
        // Initialization
        // =========================================================================

        /**
         * On view initialization.
         */
        public function initializeView():void {
            // Retrieve the application model.
            model = KerneosModelLocator.getInstance();

            // Register as the desktop view to the different managers
            KerneosLifeCycleManager.init(this);
            NotificationsManager.init(this);
            ModulesLifeCycleManager.init(this);

            KerneosModelLocator.getInstance().modules.addEventListener(CollectionEvent.COLLECTION_CHANGE, modulesUpdated);
            BindingUtils.bindSetter(profileUpdated, ProfileModelLocator.getInstance(), "profile");
            BindingUtils.bindSetter(loginUpdated, LoginModelLocator.getInstance(), "session");

        }

        /**
         * On view creation complete.
         */
        private function creationCompleteHandler():void {
            // Set windows events listeners.
            windowContainer.windowManager.addEventListener(MDIManagerEvent.WINDOW_CLOSE, closeWindow, false, 0, true);

            // Setup the active language and the language selector component.
            setupActiveLanguage();
        }

        // =========================================================================
        // Public methods
        // =========================================================================

        /**
         * Save all opened windows setup to the user shared object.
         */
        public function saveAllWindowsSetup():void {
            // Save the opened windows setup
            for each (var window:KerneosWindow in windowContainer.windowManager.windowList) {
                window.saveWindowSetup();
            }
        }


        // =========================================================================
        // Windows events handlers
        // =========================================================================

        /**
         * When closing a module window, force a confirmation from the user.
         */
        private function closeWindow(event:Event):void {
            if (event is MDIManagerEvent) {
                if ((event as MDIManagerEvent).window is ModuleWindow) {
                    // Store a copy of the event
                    queuedEvent = event.clone() as MDIManagerEvent;

                    // This is the line that prevents the default behavior from executing as usual
                    // because the default handler checks event.isDefaultPrevented()
                    event.preventDefault();

                    // Retrieve the target window
                    var window:ModuleWindow = (event as MDIManagerEvent).window as ModuleWindow;

                    // Resolve wether the user should be prompted before closing the window
                    var prompt:Boolean = true;

                    if (window.module.promptBeforeClose.equals(PromptBeforeCloseVO.NEVER)) {
                        prompt = false;
                    }
                    else if (window.module.promptBeforeClose.equals(PromptBeforeCloseVO.ALWAYS)) {
                        prompt = true;
                    }
                    else {
                        // If this is a SWF module that implements KerneosModule, call the
                        // canBeClosedWithoutPrompt() method.
                        if (window is SwfModuleWindow) {

                            // Don't show prompt if the module is not loaded
                            if ((window as SwfModuleWindow).isLoaded()) {
                                var kerneosModule:KerneosModule = (window as SwfModuleWindow).getKerneosModule();

                                if (kerneosModule) {
                                    prompt = !kerneosModule.canBeClosedWithoutPrompt();
                                }
                            } else {
                                prompt = false;
                            }
                        }
                    }

                    // Prompt the user or close directly the window
                    if (prompt) {
                        // Show an alert box
                        var closeAlert:Alert = Alert.show(ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE, 'kerneos.desktop.windows.closeconfirmdialog.body'), ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE, 'kerneos.desktop.windows.closeconfirmdialog.title', [window.module.name]), 3, null, confirmCloseWindow, null, 4);
                    }
                    else {
                        // Directly close the window
                        confirmCloseWindow();
                    }
                }
            }
        }


        /**
         * When user confirms closing the window.
         */
        private function confirmCloseWindow(event:CloseEvent = null):void {
            if (event == null || event.detail == mx.controls.Alert.YES) {
                // Unload the module
                ModulesLifeCycleManager.closeModuleByWindow(queuedEvent.window as ModuleWindow);
            }

            queuedEvent = null;
        }


        /**
         * Minimize all windows.
         */
        private function minimizeAllWindows():void {
            var allWindows:Array = windowContainer.windowManager.windowList;

            for (var i:Number = 0; i < allWindows.length; i++) {
                if (allWindows[i] is ModuleWindow) {
                    (allWindows[i] as MDIWindow).minimize();
                }
            }
        }


        // =========================================================================
        // Modules notifications
        // =========================================================================

        /**
         * Show the notifications log window.
         */
        private function showNotificationsLog(e:Event = null):void {
            if (notificationsLogWindow == null) {
                notificationsLogWindow = new KerneosWindow();
                notificationsLogWindow.title = ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE, 'kerneos.desktop.windows.notification.title');
                notificationsLogWindow.titleIcon = eventsIcon;
                var notificationsLog:NotificationsLog = new NotificationsLog();
                notificationsLogWindow.addChild(new NotificationsLog());
                notificationsLog.percentHeight = 100;
                notificationsLog.percentWidth = 100;
                notificationsLogWindow.addEventListener(MDIWindowEvent.CLOSE, notificationsLogWindowCloseHandler, false, 0, true);
                notificationsLogWindow.minimizeBtn.visible = false;
                windowContainer.windowManager.add(notificationsLogWindow);
            }
            else {
                notificationsLogWindow.bringToFront();
            }
        }


        /**
         * When the notifications log window is closed.
         */
        private function notificationsLogWindowCloseHandler(e:Event):void {
            notificationsLogWindow = null;
        }


        // =========================================================================
        // Localization
        // =========================================================================

        /**
         * Resolve the active language and setup the language selection component.
         */
        private function setupActiveLanguage(event:Event = null):void {
            // Retrieve the user saved setting.
            var userActiveLanguage:String = SharedObjectManager.getActiveLanguage();

            // If the user has a memorized setting, restore it.
            if (userActiveLanguage != null) {
                resourceManager.localeChain = [userActiveLanguage];
            }

            // Else apply the default setting specified in kerneos-config.
            else {
                resourceManager.localeChain = [this.model.application.defaultLanguage];
            }

            // Setup the language selection component.
            setupLanguageSelector();
        }


        /**
         * Initialize the locale selector.
         */
        private function setupLanguageSelector(event:Event = null):void {
            for (var i:int = 0; i < locales.length; i++) {
                if (locales[i].locale == resourceManager.localeChain[0]) {
                    languageSelector.selectedIndex = i;
                    return;
                }
            }
        }


        /**
         * When the locale selection has been changed.
         */
        private function languageSelectorChangeHandler(event:Event):void {
            // Change the active language to the selected one..
            resourceManager.localeChain = [languageSelector.selectedItem.locale];

            // Store the user's choice.
            SharedObjectManager.setActiveLanguage(languageSelector.selectedItem.locale);
        }


        /**
         * Return the selected locale icon.
         */
        private function getLocaleIcon(item:Object):Class {
            if (item.icon) {
                return item.icon;
            }
            return null;
        }

        /**
         * Load modules and subscribe to Kerneos topic
         */
        public function loadModules():void {
            // Load the modules
            ModulesLifeCycleManager.loadModules();

            // Subscribe a gravity consumer to the kerneos topic
            ModulesLifeCycleManager.subscribe();
        }

        /**
         * Unload modules and unsubscribe from Kerneos topic
         */
        public function unloadModules():void {
            // Unload the modules
            ModulesLifeCycleManager.unloadModules();

            // Unsubscribe a gravity consumer to the kerneos topic
            ModulesLifeCycleManager.unsubscribe();
        }

        /**
         * Open a notification
         */
        private function notifiedModuleArrivalDeparture(messageCode:String, module:ModuleVO):void {
            // Build and display the popup
            var notifPopUp:NotificationPopUp = new NotificationPopUp();
            notifPopUp.message = ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,
                    messageCode, [module.name]);
            notifPopUp.level = KerneosNotification.INFO;
            notifPopUp.setStyle("bottom", 0);
            notifPopUp.setStyle("right", 0);
            notifPopUp.module = module;

            NotificationsManager.desktop.windowContainer.addChild(notifPopUp);
        }

        /**
         * Update the desktop (modules change)
         */
        private function modulesUpdated(event:CollectionEvent):void {
            updateDesktop(ProfileModelLocator.getInstance().profile, LoginModelLocator.getInstance().session, KerneosModelLocator.getInstance().modules);
        }

        /**
         * Update the desktop (login change)
         */
        private function loginUpdated(session:SessionVO):void {
            updateDesktop(ProfileModelLocator.getInstance().profile, session, KerneosModelLocator.getInstance().modules);
        }

        /**
         * Update the desktop (profile change)
         */
        private function profileUpdated(profile:ProfileVO):void {
            updateDesktop(profile, LoginModelLocator.getInstance().session, KerneosModelLocator.getInstance().modules);
        }


        /**
         * Update the desktop view
         */
        private function updateDesktop(profile:ProfileVO, session:SessionVO, modules:ArrayCollection):void {
            var roles:ArrayCollection = (session != null) ? session.roles : null;

            var newArr:ArrayCollection = new ArrayCollection();
            for each(var module:ModuleVO in modules) {
                if (ProfileManager.haveModuleAccess(profile, roles, module.bundle, module.id))
                    newArr.addItem(module);
            }

            // Sort
            var dataSortField:SortField = new SortField();
            dataSortField.name = "name";
            dataSortField.caseInsensitive = true;

            var dataSort:Sort = new Sort();
            dataSort.fields = [dataSortField];
            newArr.sort = dataSort;
            newArr.refresh();

            // Seek added Modules
            for each (var module1:ModuleVO in newArr) {
                if (!desktopModules.contains(module1)) {
                    // Clear cache
                    IconUtility.deleteSource(module.bigIcon);
                    IconUtility.deleteSource(module.smallIcon);

                    // Reload cache
                    module.getSmallIcon();
                    module.getBigIcon();

                    //Show notification
                    if (KerneosModelLocator.getInstance().state == KerneosState.DESKTOP &&
                            ModulesLifeCycleManager.notification &&
                            model.application.showNotificationPopups) {
                        notifiedModuleArrivalDeparture('kerneos.lifecyclemanager.notification.module.load', module1);
                    }
                }
            }

            // Seek removed Modules
            for each (var module2:ModuleVO in desktopModules) {
                if (!newArr.contains(module2)) {

                    // Stop module
                    ModulesLifeCycleManager.stopModule(module2, "kerneos.error.module.uninstalled");

                    //Show notification
                    if (KerneosModelLocator.getInstance().state == KerneosState.DESKTOP &&
                            ModulesLifeCycleManager.notification &&
                            model.application.showNotificationPopups) {
                        notifiedModuleArrivalDeparture('kerneos.lifecyclemanager.notification.module.unload', module2);
                    }
                }
            }

            desktopModules = newArr;
        }

        [Bindable]
        private var desktopModules:ArrayCollection = new ArrayCollection();
        ]]>
    </fx:Script>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- UI Children                                                             -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <flexlibMdiContainers:MDICanvas id="windowContainer"
                                    horizontalScrollPolicy="off"
                                    verticalScrollPolicy="off"
                                    width="100%"
                                    height="100%"
                                    backgroundColor="#FFFFFF"
                                    backgroundAlpha="0"
                                    snapDistance="15"
                                    tilePadding="5">
        <mx:TileList id="modulesList"
                     height="100%"
                     width="100%"
                     x="5"
                     y="5"
                     direction="vertical"
                     dataProvider="{desktopModules}"
                     backgroundAlpha="0.0"
                     borderStyle="none"
                     useRollOver="false"
                     selectable="false"
                     itemRenderer="org.ow2.kerneos.core.view.ListModuleRenderer">
        </mx:TileList>
    </flexlibMdiContainers:MDICanvas>
    <mx:HBox id="taskBar"
             width="100%"
             height="32"
             bottom="0"
             left="0"
             right="0"
             paddingLeft="5"
             paddingRight="5"
             styleName="taskBar">
        <mx:Button width="22"
                   height="22"
                   icon="{downIcon}"
                   click="{minimizeAllWindows()}"
                   toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.minimizeButton.tooltip')}"
                   styleName="taskBarSmallButton"
                   visible="{model.application.showMinimizeAllButton}"
                   includeInLayout="{model.application.showMinimizeAllButton}"/>
        <mx:VRule height="70%"
                  alpha="0.25"
                  visible="{model.application.showMinimizeAllButton}"
                  includeInLayout="{model.application.showMinimizeAllButton}"/>
        <view:KerneosButtonScrollingCanvas id="scrollabeTaskBarZone"
                                           width="100%"
                                           height="100%"
                                           buttonWidth="24"
                                           explicitButtonHeight="24"
                                           leftButtonStyleName="taskBarScrollLeftButton"
                                           rightButtonStyleName="taskBarScrollRightButton"
                                           scrollJump="40"
                                           scrollSpeed="20">
            <mx:HBox id="minimizedWindowsButtonsContainer"
                     width="100%"
                     height="100%"
                     horizontalAlign="left"
                     verticalAlign="middle"
                     verticalScrollPolicy="off"
                     horizontalScrollPolicy="off"/>
            <mx:Spacer width="100%"/>
        </view:KerneosButtonScrollingCanvas>
        <mx:VRule height="70%"
                  alpha="0.25"/>
        <commonView:IconComboBox id="languageSelector"
                                 dataProvider="{locales}"
                                 labelField="label"
                                 iconFunction="getLocaleIcon"
                                 change="languageSelectorChangeHandler(event)"
                                 styleName="localeComboBox"
                                 toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.languageSelector.tooltip')}"/>
        <mx:VRule height="70%"
                  alpha="0.25"/>
        <mx:Button width="22"
                   height="22"
                   icon="{cascadeIcon}"
                   click="windowContainer.windowManager.cascade()"
                   toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.cascadeButton.tooltip')}"
                   styleName="taskBarSmallButton"
                   visible="{model.application.showCascadeButton}"
                   includeInLayout="{model.application.showCascadeButton}"/>
        <mx:Button width="22"
                   height="22"
                   icon="{tileIcon}"
                   click="windowContainer.windowManager.tile(true,3)"
                   toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.tileButton.tooltip')}"
                   styleName="taskBarSmallButton"
                   visible="{model.application.showTileButton}"
                   includeInLayout="{model.application.showTileButton}"/>
        <mx:Button width="22"
                   height="22"
                   icon="{eventsIcon}"
                   click="{showNotificationsLog()}"
                   toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.notificationsLogButton.tooltip')}"
                   styleName="taskBarSmallButton"
                   visible="{model.application.enableNotificationsLog}"
                   includeInLayout="{model.application.enableNotificationsLog}"/>
        <mx:Button width="22"
                   height="22"
                   icon="{logoutIcon}"
                   click="{KerneosLifeCycleManager.logout()}"
                   toolTip="{ResourceManager.getInstance().getString(LanguagesManager.LOCALE_RESOURCE_BUNDLE,'kerneos.desktop.logoutButton.tooltip')}"
                   styleName="taskBarSmallButton"/>
    </mx:HBox>
</mx:VBox>
