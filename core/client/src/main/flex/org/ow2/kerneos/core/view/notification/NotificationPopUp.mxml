<?xml version="1.0" encoding="utf-8"?>
<!--
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - JASMINe
  - Copyright (C) 2008 Bull S.A.S.
  - Contact: jasmine AT ow2.org
  -
  - This library is free software; you can redistribute it and/or
  - modify it under the terms of the GNU Lesser General Public
  - License as published by the Free Software Foundation; either
  - version 2.1 of the License, or any later version.
  -
  - This library is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  - Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public
  - License along with this library; if not, write to the Free Software
  - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  - USA
  -
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - $Id$
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="180"
         height="120"
         horizontalAlign="center"
         addedEffect="{fadeIn}"
         hideEffect="{fadeOut}"
         creationComplete="initComponent()"
         horizontalScrollPolicy="off"
         verticalScrollPolicy="off">
    
    <fx:Script>
    <![CDATA[
        import mx.core.Container;

        import org.ow2.kerneos.core.vo.KerneosNotification;
        import org.ow2.kerneos.core.view.window.ModuleWindow;
        import org.ow2.kerneos.core.vo.ModuleVO;


        // =========================================================================
        // Variables
        // =========================================================================

        /**
         * The time before it auto-closes (in ms)
         */
        public static var LIFE_TIME:int = 2500;

        /**
         * The html text message
         */
        [Bindable]
        public var message:String;

        /**
         * The message level
         */
        [Bindable]
        public var level:String;

        /**
         * The window linked to this message
         */
        [Bindable]
        public var window:ModuleWindow;

        [Bindable]
        public var module:ModuleVO;


        // Private vars

        /**
         * The timer used to automatically close the popup
         */
        private var timer:Timer;

        /**
         * Wether the popup has already been closed
         */
        private var closed:Boolean = false;


        // =========================================================================
        // Initialization
        // =========================================================================

        /**
         * Initialize the notification popup component
         */
        private function initComponent(e:Event = null):void {
            // Start the auto-close timer
            startTimer();

            // Reset the timer when mouse is on the component
            addEventListener(MouseEvent.MOUSE_OVER, stopTimer);
            addEventListener(MouseEvent.MOUSE_OUT, startTimer);
        }


        // =========================================================================
        // Public methods
        // =========================================================================

        /**
         * Close the popup
         */
        public function close(e:Event = null):void {
            if (!closed) {
                // Stop and delete the timer
                stopTimer();
                timer = null;

                // Mark the popup as closed
                closed = true;

                // Remove this from the stage
                this.visible = false;
            }
        }


        // =========================================================================
        // Private methods
        // =========================================================================

        /**
         * Start the auto-close timer
         */
        private function startTimer(e:Event = null):void {
            // If the timer is not initialized, create it
            if (timer == null) {
                timer = new Timer(LIFE_TIME, 1);
            } else {
                timer.reset();
            }

            // Then start it
            timer.addEventListener(TimerEvent.TIMER, timerHandler, false, 0, true);
            timer.start();
        }

        /**
         * Stop the auto-close timer
         */
        private function stopTimer(e:Event = null):void {
            if (timer !== null) {
                // Stop and reset the timer
                timer.reset();
                timer.removeEventListener(TimerEvent.TIMER, timerHandler);
            }
        }


        /**
         * Handle the timer tick
         */
        private function timerHandler(e:Event):void {
            // If not already closed
            if (!closed) {

                // Close the popup
                close();
            }

        }
        ]]>
    </fx:Script>

    <fx:Declarations>
        <!-- Effects -->
        <mx:Fade id="fadeIn"
                 alphaFrom="0.0"
                 alphaTo="1.0"
                 duration="400"/>
        <mx:Fade id="fadeOut"
                 alphaFrom="1.0"
                 alphaTo="0.0"
                 duration="100" effectEnd="(parent as Container).removeChild(this);"/>
    </fx:Declarations>
   
    <!-- UI -->  
    <mx:HBox width="100%"
             verticalAlign="top">
        <mx:Image id="moduleIcon"
                  width="16" 
                  height="16"
                  source="{(window != null)?window.module.getSmallIcon(moduleIcon): module.getSmallIcon(moduleIcon)}"/>
        <mx:Text text="{(window != null)?window.module.name: module.name}"
                 fontWeight="bold"
                 selectable="false"
                 useHandCursor="true"
                 mouseChildren="false"
                 buttonMode="true"
                 click="{window.bringToFront()}"/>
        <mx:Spacer width="100%"/>
        <mx:Button id="closeButton"
                   styleName="closeNotificationPopUpButton"
                   click="close()"
                   width="16"
                   height="16"/>
    </mx:HBox>
    <mx:Box id="body"
            height="100%"
            width="100%"
            verticalAlign="middle"
            horizontalAlign="center"
            horizontalScrollPolicy="off">
    <mx:Text htmlText="{(level != KerneosNotification.INFO)?level+': ':''}{message}"
             width="100%"
             textAlign="center"
             selectable="false"
             useHandCursor="true"
             mouseChildren="false"
             buttonMode="true"
             click="{(window != null)?window.bringToFront():''}"/>
    </mx:Box>
    
</mx:VBox>
