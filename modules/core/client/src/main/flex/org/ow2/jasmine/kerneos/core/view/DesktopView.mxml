<?xml version = "1.0" encoding = "utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - JASMINe
     - Copyright (C) 2008 Bull S.A.S.
     - Contact: jasmine@ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - $Id$
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<!---
     The desktop view displayed when everything is loaded and OK.

     @author Julien Nicoulaud
     @author Guillaume Renault
-->
<mx:VBox xmlns:mx = "http://www.adobe.com/2006/mxml"
         xmlns:view = "org.ow2.jasmine.kerneos.core.view.*"
         xmlns:commonView = "org.ow2.jasmine.kerneos.common.view.*"
         xmlns:flexlibContainers = "flexlib.containers.*"
         xmlns:flexlibMdiContainers = "flexlib.mdi.containers.*"
         creationComplete = "creationCompleteHandler()"
         verticalGap = "1">

    <mx:Script>
        <![CDATA[
            import org.ow2.jasmine.kerneos.core.managers.KerneosLifeCycleManager;
            
            import mx.controls.Alert;
            import mx.events.CloseEvent;
            import mx.modules.ModuleLoader;
            
            import flexlib.mdi.containers.MDIWindow;
            import flexlib.mdi.events.MDIManagerEvent;
            import flexlib.mdi.events.MDIWindowEvent;
            
            import org.ow2.jasmine.kerneos.core.vo.ModuleWithWindowVO;
            import org.ow2.jasmine.kerneos.core.api.KerneosModule;
            import org.ow2.jasmine.kerneos.core.view.window.SwfModuleWindow;
            import org.ow2.jasmine.kerneos.core.view.window.KerneosWindow;
            import org.ow2.jasmine.kerneos.core.view.window.ModuleWindow;
            import org.ow2.jasmine.kerneos.core.view.notification.NotificationsLog;
            import org.ow2.jasmine.kerneos.core.managers.SharedObjectManager;
            import org.ow2.jasmine.kerneos.core.managers.NotificationsManager;
            import org.ow2.jasmine.kerneos.core.managers.ModulesLifeCycleManager;
            import org.ow2.jasmine.kerneos.core.model.KerneosModelLocator;
            
            // =========================================================================
            // Variables
            // =========================================================================
            
            // Assets
            
            /**
             * Minimize all windows icon.
             */
            [Embed(source="/../assets/down.png")]
            [Bindable]
            private var downIcon : Class;
            
            /**
             * Cascade windows icon.
             */
            [Embed(source="/../assets/cascade.png")]
            [Bindable]
            private var cascadeIcon : Class;
            
            /**
             * Tile windows icon.
             */
            [Embed(source="/../assets/tile.png")]
            [Bindable]
            private var tileIcon : Class;
            
            /**
             * Events icon.
             */
            [Embed(source="/../assets/events_list16.png")]
            [Bindable]
            private var eventsIcon : Class;
            
            /**
             * Log out icon.
             */
            [Embed(source="/../assets/exit.png")]
            [Bindable]
            private var logoutIcon : Class;
            
            /**
             * Icon for the en_US locale.
             */
            [Embed(source="/../assets/en_US.png")]
            [Bindable]
            public var en_USIcon : Class;
            
            /**
             * Icon for the fr_FR locale.
             */
            [Embed(source="/../assets/fr_FR.png")]
            [Bindable]
            public var fr_FRIcon : Class;
            
            // Variables
            
            /**
             * The application model
             */
            [Bindable]
            private var model : KerneosModelLocator;
            
            /**
             * Potential window manager queued event
             * @see closeWindow()
             */
            private var queuedEvent : MDIManagerEvent;
            
            /**
             * The actual available and supported languages.
             */
            [Bindable]
            private var locales : Array = [{locale: "fr_FR", label: "FranÃ§ais", icon: fr_FRIcon},
                                           {locale: "en_US", label: "English", icon: en_USIcon}];
            
            /**
             * The notifications log window
             */
            private var notificationsLogWindow : KerneosWindow = null;
            
            
            
            // =========================================================================
            // Initialization
            // =========================================================================
            
            /**
             * On view creation complete.
             */
            private function creationCompleteHandler(e : Event = null) : void
            {
                // Retrieve the application model.
                model = KerneosModelLocator.getInstance();
                
                // Register as the desktop view to the different managers
                ModulesLifeCycleManager.desktop = KerneosLifeCycleManager.desktop = NotificationsManager.desktop = this;
                
                // Set windows events listeners.
                windowContainer.windowManager.addEventListener(MDIManagerEvent.WINDOW_CLOSE, closeWindow);
                
                // Setup the active language and the language selector component.
                setupActiveLanguage();
            }
            
            
            
            // =========================================================================
            // Public methods
            // =========================================================================
            
            /**
             * Save all opened windows setup to the user shared object.
             */
            public function saveAllWindowsSetup() : void
            {
                // Save the opened windows setup
                for each (var window : KerneosWindow in windowContainer.windowManager.windowList)
                {
                    window.saveWindowSetup();
                }
            }
            
            
            
            // =========================================================================
            // Windows events handlers
            // =========================================================================
            
            /**
             * When closing a module window, force a confirmation from the user.
             */
            private function closeWindow(event : Event) : void
            {
                if (event is MDIManagerEvent)
                {
                    if ((event as MDIManagerEvent).window is ModuleWindow)
                    {
                        // Store a copy of the event
                        queuedEvent = event.clone() as MDIManagerEvent;
                        
                        // This is the line that prevents the default behavior from executing as usual
                        // because the default handler checks event.isDefaultPrevented()
                        event.preventDefault();
                        
                        // Retrieve the target window
                        var window : ModuleWindow = (event as MDIManagerEvent).window as ModuleWindow;
                        
                        // Resolve wether the user should be prompted before closing the window
                        var prompt : Boolean = true;
                        
                        if (window.module.promptBeforeClose == ModuleWithWindowVO.NEVER_PROMPT_BEFORE_CLOSE)
                        {
                            prompt = false;
                        }
                        else if (window.module.promptBeforeClose == ModuleWithWindowVO.ALWAYS_PROMPT_BEFORE_CLOSE)
                        {
                            prompt = true;
                        }
                        else
                        {
                            // If this is a SWF module that implements KerneosModule, call the
                            // canBeClosedWithoutPrompt() method.
                            if (window is SwfModuleWindow)
                            {
                                
                                // Retrieve the module loader
                                var moduleLoader : ModuleLoader = (window as SwfModuleWindow).moduleLoader;
                                
                                if (moduleLoader.child is KerneosModule)
                                {
                                    prompt = !(moduleLoader.child as KerneosModule).canBeClosedWithoutPrompt();
                                }
                            }
                        }
                        
                        // Prompt the user or close directly the window
                        if (prompt)
                        {
                            // Show an alert box
                            var closeAlert : Alert = Alert.show("Are you sure you want to exit this module ? \n" + "All unsaved changes might be lost.", "Exit " + window.module.name, 3, null, confirmCloseWindow, null, 4);
                        }
                        else
                        {
                            // Directly close the window
                            confirmCloseWindow();
                        }
                    }
                }
            }
            
            
            
            /**
             * When user confirms closing the window.
             */
            private function confirmCloseWindow(event : CloseEvent = null) : void
            {
                if (event == null || event.detail == mx.controls.Alert.YES)
                {
                    // Unload the module
                    ModulesLifeCycleManager.stopModuleByWindow(queuedEvent.window as ModuleWindow);
                    
                    // Close the window component
                    windowContainer.windowManager.executeDefaultBehavior(queuedEvent);
                }
            }
            
            
            
            /**
             * Minimize all windows.
             */
            private function minimizeAllWindows() : void
            {
                var allWindows : Array = windowContainer.windowManager.windowList;
                
                for (var i : Number = 0; i < allWindows.length; i++)
                {
                    if (allWindows[i] is ModuleWindow)
                    {
                        (allWindows[i] as MDIWindow).minimize();
                    }
                }
            }
            
            
            
            // =========================================================================
            // Modules notifications
            // =========================================================================
            
            /**
             * Show the notifications log window.
             */
            private function showNotificationsLog(e : Event = null) : void
            {
                if (notificationsLogWindow == null)
                {
                    notificationsLogWindow = new KerneosWindow();
                    notificationsLogWindow.title = "Events log";
                    notificationsLogWindow.titleIcon = eventsIcon;
                    var notificationsLog : NotificationsLog = new NotificationsLog();
                    notificationsLogWindow.addChild(new NotificationsLog());
                    notificationsLog.percentHeight = 100;
                    notificationsLog.percentWidth = 100;
                    notificationsLogWindow.addEventListener(MDIWindowEvent.CLOSE, notificationsLogWindowCloseHandler);
                    notificationsLogWindow.minimizeBtn.visible = false;
                    windowContainer.windowManager.add(notificationsLogWindow);
                }
                else
                {
                    notificationsLogWindow.bringToFront();
                }
            }
            
            
            
            /**
             * When the notifications log window is closed.
             */
            private function notificationsLogWindowCloseHandler(e : Event) : void
            {
                notificationsLogWindow = null;
            }
            
            
            
            // =========================================================================
            // Localization
            // =========================================================================
            
            /**
             * Resolve the active language and setup the language selection component.
             */
            private function setupActiveLanguage(event : Event = null) : void
            {
                // Retrieve the user saved setting.
                var userActiveLanguage : String = SharedObjectManager.getActiveLanguage();
                
                // If the user has a memorized setting, restore it.
                if (userActiveLanguage != null)
                {
                    resourceManager.localeChain = [userActiveLanguage];
                }
                
                // Else apply the default setting specified in kerneos-config.
                else
                {
                    resourceManager.localeChain = [this.model.config.defaultLanguage];
                }
                
                // Setup the language selection component.
                setupLanguageSelector();
            }
            
            
            
            /**
             * Initialize the locale selector.
             */
            private function setupLanguageSelector(event : Event = null) : void
            {
                for (var i : int = 0; i < locales.length; i++)
                {
                    if (locales[i].locale == resourceManager.localeChain[0])
                    {
                        languageSelector.selectedIndex = i;
                        return;
                    }
                }
            }
            
            
            
            /**
             * When the locale selection has been changed.
             */
            private function languageSelectorChangeHandler(event : Event) : void
            {
                // Change the active language to the selected one..
                resourceManager.localeChain = [languageSelector.selectedItem.locale];
                
                // Store the user's choice.
                SharedObjectManager.setActiveLanguage(languageSelector.selectedItem.locale);
            }
            
            
            
            /**
             * Return the selected locale icon.
             */
            private function getLocaleIcon(item : Object) : Class
            {
                if (item.icon)
                {
                    return item.icon;
                }
                return null;
            }
        ]]>
    </mx:Script>


    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- UI Children                                                             -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <flexlibMdiContainers:MDICanvas id = "windowContainer"
                                    horizontalScrollPolicy = "off"
                                    verticalScrollPolicy = "off"
                                    width = "100%"
                                    height = "100%"
                                    backgroundColor = "#FFFFFF"
                                    backgroundAlpha = "0"
                                    paddingLeft = "0"
                                    paddingRight = "0"
                                    paddingBottom = "0"
                                    paddingTop = "0"
                                    snapDistance = "15"
                                    tilePadding = "5">
        <mx:TileList id = "modulesList"
                     height = "100%"
                     x = "5"
                     y = "5"
                     direction = "vertical"
                     dataProvider = "{model.config.modules}"
                     backgroundAlpha = "0.0"
                     borderStyle = "none"
                     useRollOver = "false"
                     selectable = "false"
                     itemRenderer = "org.ow2.jasmine.kerneos.core.view.ListModuleRenderer">
        </mx:TileList>
    </flexlibMdiContainers:MDICanvas>
    <mx:HBox id = "taskBar"
             width = "100%"
             height = "32"
             bottom = "0"
             left = "0"
             right = "0"
             paddingLeft = "5"
             paddingRight = "5"
             styleName = "taskBar">
        <mx:Button width = "22"
                   height = "22"
                   icon = "{downIcon}"
                   click = "{minimizeAllWindows()}"
                   toolTip = "Minimize all windows"
                   styleName = "taskBarSmallButton"
                   visible = "{model.config.showMinimizeAllButton}"
                   includeInLayout = "{model.config.showMinimizeAllButton}" />
        <mx:VRule height = "70%"
                  alpha = "0.25"
                  visible = "{model.config.showMinimizeAllButton}"
                  includeInLayout = "{model.config.showMinimizeAllButton}" />
        <view:KerneosButtonScrollingCanvas id = "scrollabeTaskBarZone"
                                           width = "100%"
                                           height = "100%"
                                           buttonWidth = "24"
                                           explicitButtonHeight = "24"
                                           leftButtonStyleName = "taskBarScrollLeftButton"
                                           rightButtonStyleName = "taskBarScrollRightButton"
                                           scrollJump = "40"
                                           scrollSpeed = "20">
            <mx:HBox id = "minimizedWindowsButtonsContainer"
                     width = "100%"
                     height = "100%"
                     horizontalAlign = "left"
                     verticalAlign = "middle"
                     verticalScrollPolicy = "off"
                     horizontalScrollPolicy = "off" />
            <mx:Spacer width = "100%" />
        </view:KerneosButtonScrollingCanvas>
        <mx:VRule height = "70%"
                  alpha = "0.25" />
        <commonView:IconComboBox id = "languageSelector"
                                 dataProvider = "{locales}"
                                 labelField = "label"
                                 iconFunction = "getLocaleIcon"
                                 change = "languageSelectorChangeHandler(event)"
                                 styleName = "localeComboBox"
                                 toolTip = "Switch language" />
        <mx:VRule height = "70%"
                  alpha = "0.25" />
        <mx:Button width = "22"
                   height = "22"
                   icon = "{cascadeIcon}"
                   click = "windowContainer.windowManager.cascade()"
                   toolTip = "Cascade windows"
                   styleName = "taskBarSmallButton"
                   visible = "{model.config.showCascadeButton}"
                   includeInLayout = "{model.config.showCascadeButton}" />
        <mx:Button width = "22"
                   height = "22"
                   icon = "{tileIcon}"
                   click = "windowContainer.windowManager.tile(true,3)"
                   toolTip = "Tile windows"
                   styleName = "taskBarSmallButton"
                   visible = "{model.config.showTileButton}"
                   includeInLayout = "{model.config.showTileButton}" />
        <mx:Button width = "22"
                   height = "22"
                   icon = "{eventsIcon}"
                   click = "{showNotificationsLog()}"
                   toolTip = "Show events log"
                   styleName = "taskBarSmallButton"
                   visible = "{model.config.enableNotificationsLog}"
                   includeInLayout = "{model.config.enableNotificationsLog}" />
        <mx:Button width = "22"
                   height = "22"
                   icon = "{logoutIcon}"
                   click = "{KerneosLifeCycleManager.logout()}"
                   toolTip = "Logout"
                   styleName = "taskBarSmallButton" />
    </mx:HBox>

</mx:VBox>
