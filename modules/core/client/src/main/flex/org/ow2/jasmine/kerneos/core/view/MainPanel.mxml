<?xml version="1.0" encoding="utf-8"?>
<!--
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - JASMINe
  - Copyright (C) 2008 Bull S.A.S.
  - Contact: jasmine@ow2.org
  -
  - This library is free software; you can redistribute it and/or
  - modify it under the terms of the GNU Lesser General Public
  - License as published by the Free Software Foundation; either
  - version 2.1 of the License, or any later version.
  -
  - This library is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  - Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public
  - License along with this library; if not, write to the Free Software
  - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  - USA
  -
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - $Id: MainPanel.mxml 2510 2008-10-02 10:02:54Z renaultgu $
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<core:Core xmlns:core="org.ow2.jasmine.kerneos.core.api.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
    xmlns:local="*">

    
    <mx:Script>
        <![CDATA[
            import org.ow2.jasmine.kerneos.login.model.LogInModelLocator;
            import mx.events.ModuleEvent;
            import mx.containers.VBox;
            import mx.modules.ModuleLoader;
            import mx.events.CollectionEventKind;
            import mx.events.CollectionEvent;
            import mx.events.ItemClickEvent;
            import mx.collections.ArrayCollection;
            import org.ow2.jasmine.kerneos.core.api.Core;
            import org.ow2.jasmine.kerneos.core.api.ICore;
            
            import org.ow2.jasmine.kerneos.core.event.ModulesEvent;
            import mx.controls.Alert;
            import org.ow2.jasmine.kerneos.core.model.ModuleModelLocator;
            import com.adobe.cairngorm.control.CairngormEventDispatcher;
            
            
            import mx.core.Application;
			import mx.utils.URLUtil;
			import mx.messaging.channels.AMFChannel;
        	import mx.messaging.ChannelSet;
        	import com.adobe.cairngorm.business.ServiceLocator;
        	import org.ow2.jasmine.kerneos.common.util.Util;
        	
            /////////////////////////////////////////////
            // Dummy
             
            // due to a bug in the SDK. key:SDK-12061
            import mx.managers.DragManager;
            
            private var dragManager:DragManager;
            
            // endDummy
            /////////////////////////////////////////////
            
            /**
            * Format :
            *   {id:<ID>,canvas:<Canvas>}
            */
            [Bindable]
            private var canvasList:ArrayCollection = new ArrayCollection();
            
            /**
            * Format :
            *   {module:<ModuleName>,name:<DisplayedName>,load:<LoadState>}
            */

            [Bindable]
            public static var modules:ArrayCollection = new ArrayCollection();
            
            
            private static var _amfChannel:AMFChannel = null;
            
            [Bindable]
			public static var amfChannelSet:ChannelSet = null;
			
			
           
            public function init() : void {
                		
            	var urlServer:String = URLUtil.getServerNameWithPort(Application.application.loaderInfo.url).toString();
            	var context:String = Util.parserURL(Application.application.loaderInfo.url.toString());
            	
            	amfChannelSet = new ChannelSet();
            	_amfChannel = new AMFChannel("my-graniteamf-kerneos","http://"+urlServer+"/"+context+"/graniteamf/amf");       	
            	
            	amfChannelSet.addChannel(_amfChannel);

            	var obl:Object = ServiceLocator.getInstance().getRemoteObject( "logInService" );
            	ServiceLocator.getInstance().getRemoteObject( "logInService" ).channelSet = amfChannelSet;
            	ServiceLocator.getInstance().getRemoteObject( "modulesService" ).channelSet = amfChannelSet;      
            	
                for each (var obj:Object in this.canvasList ) {
                    obj.canvas.horizontalScrollPolicy = "off";
                    obj.canvas.verticalScrollPolicy = "off";
                    viewStack.addChild(obj.canvas);
                }
                viewStack.selectedIndex = 0;
                tb.selectedIndex = viewStack.selectedIndex;
                this.loaderModuleEvent();
            }
            
            
            
            private function manageTabs(event:CollectionEvent):void {
                if (event.kind == CollectionEventKind.UPDATE) {
                    this.mainVBox.enabled = false;
                    var selected:Object = this.dg.selectedItem;
                    
                    if (selected.load == false) {
                        // si dedans, on enleve
                        for each ( var obj:Object in this.canvasList ) {
                            if (obj.id == selected.name) {
                                (Canvas(obj.canvas).getChildAt(0) as ModuleLoader).unloadModule();
                                this.viewStack.removeChild(obj.canvas);
                                this.canvasList.removeItemAt(this.canvasList.getItemIndex(obj));
                                this.enableGrid(null);
                                return;
                            } 
                        }
                    }
                    
                    if (selected.load == true) {
                        var canvas:Canvas = new Canvas();
                        canvas.percentHeight = 100;
                        canvas.percentWidth = 100;
                        canvas.label = String(selected.name);
                        var moduleLoader:ModuleLoader = new ModuleLoader();
                        moduleLoader.url = selected.module;
                        moduleLoader.percentWidth = 100;
                        moduleLoader.percentHeight = 100;
                        moduleLoader.setStyle("paddingTop",33);
                        moduleLoader.addEventListener(ModuleEvent.READY,enableGrid);
                        canvas.addChild(moduleLoader);
                        this.canvasList.addItem({id:selected.name,canvas:canvas});
                        this.viewStack.addChild(canvas);
                        return;
                    }
                }                
            }
            
            private function enableGrid(event:ModuleEvent):void {
                this.mainVBox.enabled = true;
            }
            
            public function item(e:ItemClickEvent):void {
                viewStack.selectedIndex = e.index;
            }
        ]]>
    </mx:Script>
    
    <mx:Script>
        <![CDATA[
            //
            //  Login
            //
            
            private function logIn():void {
                logInPanel.logIn();                
            }
            
            private function reset():void {
                logInPanel.reset();
            }
            
            private function logout():void {
                logInPanel.logout();
            }
            
            private function set logged(log:Boolean):void {
                if (log) { // when login
                    this.currentState = "logged";
                    
                    // get the instance of ICore
                    var core_instance:ICore = Core.getInstance();
                    var loader:ModuleLoader ;
                    
                    // get the modules for charging
                    var modulesFromArchive:ArrayCollection = ModuleModelLocator.getInstance().listModules;
                    
                    // charging modules
					for(var j:int = 0;  j< modulesFromArchive.length; j++){
						loader = new ModuleLoader();
	        			loader.url = modulesFromArchive.getItemAt(j).toString();
						loader.loadModule();
						this.addChild(loader);
                	}
                	
                	// get modules charged
                	modules = core_instance.modulesList;
                	
                	// add the modules
					MainPanel.modules.addEventListener(CollectionEvent.COLLECTION_CHANGE, manageTabs); 			
                } else { // when logout
                    this.currentState = "";
                    
                    // unload all modules
                    for ( var k:int = 0; k<this.canvasList.length; k++ ) {
                        try {
                            var obj:Object = this.canvasList.getItemAt(k);
                            if(obj.canvas != c1) {
                                (Canvas(obj.canvas).getChildAt(0) as ModuleLoader).unloadModule();
                                this.viewStack.removeChild(obj.canvas);
                            }
                        } catch (e:Error) {
                            Alert.show(e.toString());
                        }
                    }
                    
                    // flush the canvas list
                    this.canvasList.removeAll();
                    
                    // update the grid
                    for each (var obj1:Object in MainPanel.modules) {
                        obj1.load = false;
                    }                   
                }
            }

            // send event for receive the modules in deploied war
            public function loaderModuleEvent():void {
            	try{
	                var event_module:ModulesEvent = new ModulesEvent(ModulesEvent.GET_MODULE);
	                CairngormEventDispatcher.getInstance().dispatchEvent(event_module);
                }catch(e:Error){
	     			trace("An error occurred: " + e.message);
	     		}
            }
        ]]>
    </mx:Script>
    
    <mx:Binding source="LogInModelLocator.getInstance().loggedIn" destination="logged" />
    
    <mx:HTTPService id="context" url="@ContextRoot()"/>
    <mx:RemoteObject id="logInService"  destination="logIn" showBusyCursor="true"/>
    <mx:RemoteObject id="modulesService"  destination="modules" showBusyCursor="true"/>
    
    
    <core:states>
        <mx:State name="logged">
            <mx:SetProperty target="{dg}" name="height" value="50%"/>
            <mx:SetProperty target="{dg}" name="minHeight" value="50%"/>
            <mx:SetProperty target="{loginVBox}" name="height" value="0" />                  
            <mx:SetProperty target="{logoutVBox}" name="height" value="50%" />        
        </mx:State>
    </core:states>
    
    <core:transitions>
        <mx:Transition fromState="*" toState="*">
            <mx:Resize target="{dg}" duration="1000"/>
        </mx:Transition>
    </core:transitions>
    
    <mx:Canvas id="c1" label="Home" width="100%" initialize="{this.canvasList.addItem({id:'home',canvas:c1});}" >    
            <mx:VBox id="mainVBox" width="100%" height="100%" horizontalAlign="center" verticalAlign="top" paddingTop="33">
                <mx:DataGrid id="dg" width="50%" height="0" dataProvider="{MainPanel.modules}" verticalScrollPolicy="off">
                    <mx:columns> 
                        <mx:DataGridColumn dataField="name" headerText="Module name" width="150"/>
                        <mx:DataGridColumn dataField="description" headerText="Module Description" wordWrap="true" sortable="false"/>
                        <mx:DataGridColumn dataField="load" headerText="Load state" sortable="false" width="80">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:HBox horizontalAlign="center">
                                        <mx:Script>
                                            <![CDATA[
                                                public function click():void {
                                                    data.load = c.selected;
                                                    MainPanel.modules.itemUpdated(data);
                                                }
                                            ]]>
                                        </mx:Script>
                                        <mx:CheckBox id="c" enabled="true" selected="{data.load}" click="{click();}"/>
                                    </mx:HBox>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                    </mx:columns>
                </mx:DataGrid>
                <mx:VBox id="loginVBox" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle" >
                    <local:LogInPanel id="logInPanel" defaultButton="{logInButton}"/>
                    <mx:HBox horizontalAlign="center">
                        <mx:Button label="Login" id="logInButton" click="logIn()"/>
                        <mx:Button label="Reset" click="reset()"/>
                    </mx:HBox>
                </mx:VBox>
                <mx:VBox id="logoutVBox" width="250" height="0" horizontalAlign="center">
                    <mx:Button label="Logout" click="{logout()}"/>
                </mx:VBox>
                
            </mx:VBox>
    </mx:Canvas>
    
    <mx:TabBar id="tb"
        itemClick="{item(event);}" 
        dataProvider="viewStack" 
        height="35"/>
    <mx:ViewStack
        id="viewStack"
        paddingTop="15"
        width="100%" height="100%" />
        
        
        
    
    

</core:Core>
