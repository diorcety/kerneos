<?xml version="1.0" encoding="utf-8"?>
<!--
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - JASMINe
  - Copyright (C) 2008 Bull S.A.S.
  - Contact: jasmine@ow2.org
  -
  - This library is free software; you can redistribute it and/or
  - modify it under the terms of the GNU Lesser General Public
  - License as published by the Free Software Foundation; either
  - version 2.1 of the License, or any later version.
  -
  - This library is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  - Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public
  - License along with this library; if not, write to the Free Software
  - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  - USA
  -
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  - $Id$
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->

<!--================================ DEV NOTES =================================
	 # BUGS
        - Keyboard shortcuts bug in full screen
        - IFrames do not work in full screen
        - Double click on minimized modules buttons does not behave as expected
        - Some random graphic bugs when stressing the application	
	 # TODO
	    - Style work
	    - Change module registering API to add Thumb + Icon
	 
	 # IDEAS
	    - Change module registering API to let modules tell if they can be
	      instanciated only once or several times
	    - Add drag and drop support to the task bar to allow changing location
	      of minimized windows
	    - Add loading animation to the Iframes
	      (see SuperIFrame.loadIndicatorClass)
=============================================================================-->

<core:Core xmlns:core="org.ow2.jasmine.kerneos.core.api.*"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:local="*"
           xmlns:flexlibMdiContainers="flexlib.mdi.containers.*"
           xmlns:view="org.ow2.jasmine.kerneos.common.view.*"
           width="100%"
           height="100%">

    
    <mx:Script>
    <![CDATA[
    
    import flash.display.StageDisplayState;
    import flash.utils.getTimer;
    import flash.events.KeyboardEvent;
    
    import com.adobe.cairngorm.business.ServiceLocator;
    import com.adobe.cairngorm.control.CairngormEventDispatcher;
    
    import mx.core.Application;
    import mx.core.UIComponent;
	import mx.events.FlexEvent;
    import mx.events.CloseEvent;
    import mx.events.ListEvent;
    import mx.events.ModuleEvent;
    import mx.events.CollectionEventKind;
    import mx.events.CollectionEvent;
    import mx.events.ItemClickEvent;
    import mx.events.ItemClickEvent;
    import mx.managers.HistoryManager;
    import mx.managers.DragManager;
    import mx.binding.utils.BindingUtils;
    import mx.modules.Module;
    import mx.modules.ModuleLoader;
	import mx.containers.Panel;
    import mx.containers.VBox;
    import mx.containers.Canvas;
    import mx.controls.Alert;
    import mx.controls.Alert;
    import mx.controls.TextArea;
    import mx.collections.ArrayCollection;
    import mx.utils.URLUtil;
    import mx.messaging.channels.AMFChannel;
    import mx.messaging.ChannelSet;
    
    import org.ow2.jasmine.kerneos.core.model.ModuleModelLocator;
    import org.ow2.jasmine.kerneos.core.vo.ServiceVO;
    import org.ow2.jasmine.kerneos.common.util.Util;
    import org.ow2.jasmine.kerneos.core.vo.ModuleVO;
    import org.ow2.jasmine.kerneos.core.view.SuperIFrame;
    import org.ow2.jasmine.kerneos.login.model.LogInModelLocator;
    import org.ow2.jasmine.kerneos.core.api.Core;
    import org.ow2.jasmine.kerneos.core.api.ICore;
    import org.ow2.jasmine.kerneos.core.event.ModulesEvent;
    
    import flexlib.containers.WindowShade;
    import flexlib.mdi.containers.MDIWindow;
    import flexlib.mdi.events.MDIWindowEvent;
    import flexlib.mdi.events.MDIManagerEvent;
    
    
    // =========================================================================
    // Variables
    // =========================================================================
    
    // Dummy: flex SDK bugs workarounds
    
    /**
    * The application drag&drop manager
    * Dummy: workaround for a bug with module loaders and drag&drop
    * @see http://bugs.adobe.com/jira/browse/SDK-12061
    */
    private var dragManager:DragManager;
    
    /**
    * The flash player history manager.
    * Dummy: workaround for a bug with modules loaders and modules using
    * ViewStacks (=> TabNavigators too)
    * @see http://bugs.adobe.com/jira/browse/SDK-15249
    */
    private var hist:HistoryManager; 
    
    
    // Variables
    
    /**
    * AMF Channel
    */
    private static var _amfChannel:AMFChannel = null;
    
    /**
    * AMF Channel set
    */
    [Bindable]
    public static var amfChannelSet:ChannelSet = null;
    
    /**
    * Available modules list
    * Format :
    *   {module:<ModuleName>,name:<DisplayedName>,load:<LoadState>}
    */
    [Bindable]
    public static var modules:ArrayCollection = new ArrayCollection();

    /**
    * Potential window manager queued event
    * @see closeWindow()
    */
    private var queuedEvent:MDIManagerEvent;

    /**
    * Full screen state
    */
    [Bindable]
    public var fullScreen:Boolean = false;

    /**
    * Whether it is the first time that someone is logging in or not.
    * If some profiles are implmented, this needs to be improve :
    * when logging out the services must be removed too.
    */
    [Bindable]
    public var firstLogin:Boolean = true;
    
    /**
    * A reference to a IFrame object
    */
    public var frame:SuperIFrame;
    
    
    // Assets
    
    /**
    * Minimize all windows icon
    */
    [Embed(source="/../assets/down.png")]
    [Bindable]
    private var downIcon:Class;
           
    /**
    * Cascade windows icon
    */
    [Embed(source="/../assets/cascade.png")]
    [Bindable]
    private var cascadeIcon:Class;

    /**
    * Tile windows icon
    */
    [Embed(source="/../assets/tile.png")]
    [Bindable]
    private var tileIcon:Class;
    
    /**
    * Enter Full screen icon
    */
    [Embed(source="/../assets/fullscreen.png")]
    [Bindable]
    private var fullScreenIcon:Class;
    
    /**
    * Exit Full screen icon
    */
    [Embed(source="/../assets/exitfullscreen.png")]
    [Bindable]
    private var exitFullScreenIcon:Class;
            
    /**
    * Log out icon
    */
    [Embed(source="/../assets/exit.png")]
    [Bindable]
    private var logoutIcon:Class;
    
    /**
    * Default module thumbnail
    */
    [Embed(source="/../assets/module.png")]
    [Bindable]
    public var defaultModuleThumbnail:Class;
    
    /**
    * Default module icon
    */
    [Embed(source="/../assets/module_icon.png")]
    [Bindable]
    public var defaultModuleIcon:Class;            
    
    
    // =========================================================================
    // Initialization
    // =========================================================================
    
    /**
    * Initialize function called on creationComplete event
    */
    public function init() : void {
        
        // Init client-server communications channels properties
        var urlServer:String =
            URLUtil.getServerNameWithPort(Application.application.loaderInfo.url).toString();
        var context:String =
            Util.parserURL(Application.application.loaderInfo.url.toString());
        
        amfChannelSet = new ChannelSet();
        _amfChannel = new AMFChannel("my-graniteamf-kerneos","http://"+urlServer+"/"+context+"/graniteamf/amf");           
        
        amfChannelSet.addChannel(_amfChannel);

        var obl:Object = ServiceLocator.getInstance().getRemoteObject( "logInService" );
        ServiceLocator.getInstance().getRemoteObject( "logInService" ).channelSet = amfChannelSet;
        ServiceLocator.getInstance().getRemoteObject( "modulesService" ).channelSet = amfChannelSet;
        
        // Send event for receive the modules in deploied war
        this.loaderModuleEvent();
        
        // Set current state to "not logged"
        this.currentState = "not_logged";
        
        // Set windows events listeners
        // This is where all windows related events can be intercepted.
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_ADD, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_MINIMIZE, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESTORE, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_MAXIMIZE, windowEventHandler);
        this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_CLOSE, closeWindow);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_FOCUS_START, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_FOCUS_END, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG_START, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_DRAG_END, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE_START, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE, windowEventHandler);
        // this.mdiCanvas.windowManager.addEventListener(MDIManagerEvent.WINDOW_RESIZE_END, windowEventHandler);
        
        // FullScreen on/off switching events listener
        stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
        
        // Listen to keyboards events at the "application" level
        parentApplication.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
    }
    

    // =========================================================================
    // Available modules management
    // =========================================================================
    
    /**
    * Send event for receive the modules in deploied war
    */
    public function loaderModuleEvent():void {
        try{
            var event_module:ModulesEvent = new ModulesEvent(ModulesEvent.GET_MODULE);
            CairngormEventDispatcher.getInstance().dispatchEvent(event_module);
        }catch(e:Error){
             trace("An error occurred while loading modules: " + e.message);
        }
    }
    
    /**
    * Start using a module in its own window
    */
    public function startModule(obj:Object):void
    {
    	// Update the module status
        obj.load = true;
        MainPanel.modules.itemUpdated(obj);
        
        // Declare a new window
        var window:ModuleWindow;
        
        // If this is a module
        if(obj.module!=null) {
            window = new SwfModuleWindow();
            var moduleLoader:ModuleLoader = new ModuleLoader();
            moduleLoader.url = obj.module;
            moduleLoader.percentWidth = 100;
            moduleLoader.percentHeight = 100;
            window.addChild(moduleLoader);
        } else {
            window = new IFrameModuleWindow();
            // var frame:SuperIFrame = new SuperIFrame();
            frame = new SuperIFrame();
            frame.label = obj.name as String;
            frame.source = obj.url;
            frame.percentHeight = 100;
            frame.percentWidth = 100;
            frame.visible = true;
            frame.overlayDetection = true;
            window.addChild(frame);
        }
        
        // Set some properties
        window.moduleName = obj.name;
        window.title = obj.name;
        window.titleIcon = defaultModuleIcon;
        
        
        var minimizedModuleWindow:MinimizedModuleWindow =
            new MinimizedModuleWindow(window);
        minimized_windows.addChild(minimizedModuleWindow);
        window.minimizedModuleWindow = minimizedModuleWindow;
        
        // Add it to the windows manager
        mdiCanvas.windowManager.add(window);
        mdiCanvas.windowManager.center(window);
        mdiCanvas.windowManager.resize(window);
        
    }

    /**
    * Unload a module
    */
    public function stopModuleByWindow(window:ModuleWindow):void
    {
        if(window is SwfModuleWindow) {
            // Unload the module
            (window.getChildAt(0) as ModuleLoader).unloadModule();
        }
        
        // Update the module state
        for each (var module:Object in MainPanel.modules) {
            if(module.name == window.moduleName) {
                module.load = false;
                MainPanel.modules.itemUpdated(module);
            }
        }
        minimized_windows.removeChild(window.minimizedModuleWindow);
    }


    // =========================================================================
    // Logged in/out states switching
    // =========================================================================
   
    /**
    * Logged in / out setter
    */
    private function set logged(log:Boolean):void {
        if (log) {
            // when login
            this.currentState = "logged";
        } else {
            // when logout
            this.currentState = "not_logged";
        }
    }
                
    /**
    * Called when entering "logged" state
    * 
    * Load modules only if not previously done.
    */
    private function enterLoggedStateHandler(e:Event):void
    {
        // Load the modules only if not previously done
        if(firstLogin) {
            
            // get the instance of ICore
            var core_instance:ICore = Core.getInstance();
            var loader:ModuleLoader ;
            
            // get the modules for charging
            var modulesFromArchive:ArrayCollection =
               ModuleModelLocator.getInstance().listModules;
               
            var serviceIds : ArrayCollection = new ArrayCollection();

            // loading modules
            for(var j:int = 0;  j< modulesFromArchive.length; j++){
                
                var module : ModuleVO = modulesFromArchive.getItemAt(j) as ModuleVO;
                
                if (module.swfFile != null) {
                    
                    // in the case of a flex module
                    
                    core_instance.addModule(module.swfFile,
                                            module.name,
                                            module.loaded,
                                            module.description);
                    
                    var services : ArrayCollection = module.services;
                    
                    for (var l:int =0 ; l < services.length ; l++) {
                        var service : ServiceVO = services.getItemAt(l) as ServiceVO;
                        core_instance.setService(service.id,service.destination);
                        // add the ids in the list to overload the AMF Channel
                        serviceIds.addItem(service.id);
                    }
                    
                } else {
                    
                    // in the case of an html page to load in a SuperIFrame
                    core_instance.addIFrame(module.url,
                                            module.name,
                                            module.loaded,
                                            module.description);
                }

            }
            
            // overload all AMF channels
            for each (var id : String in serviceIds) {
                ServiceLocator.getInstance().getRemoteObject( id ).channelSet = amfChannelSet;
            }
            
            // get modules charged
            modules = core_instance.modulesList;
            
            // Store the successfull login information
            firstLogin = false;
        }

    }
    
    /**
    * When entering "not_logged" state
    * 
    * Exit full screen and clear the form if needed.
    * Draw focus to the form and unload all modules
    */
    private function enterNotLoggedStateHandler(e:Event):void
    {
    	// If loging out
        if(!firstLogin) {
            
            // Exit full screen
            if (fullScreen) {
              stage.displayState = StageDisplayState.NORMAL;
            }

            // Unload all modules and close windows
            var allWindows:Array = 
               (mdiCanvas.windowManager.windowList as Array).concat();
            for each(var window:MDIWindow in allWindows) {
                if(window is ModuleWindow){
                    stopModuleByWindow(window as ModuleWindow);
                    mdiCanvas.windowManager.remove(window);
                }

            }
            
            // Clear the form
            reset();
        }
        
        // Draw focus to the "username" input
        //logInPanel.loginpanel.user.setFocus();
        //logInPanel.loginpanel.user.drawFocus(true);
        //logInPanel.loginpanel.user.setSelection(0,0);
    }
    
    
    // =========================================================================
    // Windows events handlers
    // =========================================================================
    
    /**
    * When closing a module window, force a confirmation from the user
    */
    private function closeWindow(event:Event):void
    {
        if(event is MDIManagerEvent)
        {
            // Store a copy of the event
            queuedEvent = event.clone() as MDIManagerEvent;
            
            // This is the line that prevents the default behavior from executing as usual
            // because the default handler checks event.isDefaultPrevented()
            event.preventDefault();
            
            // Retrieve the target window
            var window:ModuleWindow = (event as MDIManagerEvent).window as ModuleWindow;
            
            // Show an alert box
            Alert.show("Are you sure you want to exit this module ?",
                       "Exit " + window.moduleName,
                       3,
                       null,
                       confirmCloseWindow);
        }
    }
    
    /**
    * When user confirms closing the window
    */
    private function confirmCloseWindow(event:CloseEvent=null):void
    {
        if(event.detail == mx.controls.Alert.YES)
        {
            // Unload the module
            stopModuleByWindow(queuedEvent.window as ModuleWindow);
            
            // Close the window component
            mdiCanvas.windowManager.executeDefaultBehavior(queuedEvent);
        }
    }
    
    /**
    * Minimize all windows
    */
    private function minimizeAllWindows():void{
        var allWindows:Array = mdiCanvas.windowManager.windowList;
        for(var i:Number = 0; i < allWindows.length; i++) {
            (allWindows[i] as MDIWindow).minimize();
        }
    }


    // =========================================================================
    // Full screen mode
    // =========================================================================
    
    /**
    * Handler method called when the "Toggle
    * full screen" button is clicked.
    */
    private function toggleFullScreen():void
    {
        if(fullScreen) {
            // Exit full screen
            stage.displayState = StageDisplayState.NORMAL;
        } else {
            // Try to enter full screen
            try {
                stage.displayState = StageDisplayState.FULL_SCREEN;
            } catch (err:SecurityError) {
               Alert.show("The action was refused.",
                          "Switch to full screen mode");
            }
        }
    }
    
    /**
    * Handler method called when the display
    * switches between full and normal mode.
    */
    private function fullScreenHandler(evt:FullScreenEvent):void {
        if (evt.fullScreen) {
            fullScreen = true;
        } else {
            fullScreen = false;
        }
    }           
    
    
    // =========================================================================
    // Keyboard shortcuts handling
    // =========================================================================
    
    /**
    * Handles keyboard events
    * 
    * @private
    * @internal Does not work in fullscreen mode because of a bug of
    * the Flash player (FP-2032)
    * @see http://bugs.adobe.com/jira/browse/FP-2032
    */
    private function keyHandler(event:KeyboardEvent):void
    {
        switch(event.keyCode){
            case 116: // If key is F5
              reloadPage();
              break;
            case 122: // F11 => toggle full screen on/off
              toggleFullScreen();
              break;
        }
    }
    
    /**
    * Reloads the page
    */
    public function reloadPage():void
    {
        navigateToURL(new URLRequest("javascript:location.reload();"),"_self");
    }


    // =========================================================================
    // Login form handlers
    // =========================================================================
                
    /**
    * Login
    */
    private function logIn():void
    {
        logInPanel.logIn();                
    }
    
    /**
    * Reset login form
    */
    private function reset():void
    {
        logInPanel.reset();
    }
    
    /**
    * Logout
    */
    private function logout():void
    {
        // Log out      
        logInPanel.logout();
    }
        
        
    ]]>
    </mx:Script>
    
    <!-- Logged boolean source -->
    <mx:Binding source="LogInModelLocator.getInstance().loggedIn" destination="logged" />
    
    <!-- Graphical filters -->
    <mx:DropShadowFilter id="taskbar_shadow"
                         blurX="10"
                         blurY="10"
                         quality="15"
                         alpha="0.4"
                         strength="1"
                         color="#000000"
                         angle="270"
                         distance="5"/>
    <mx:GlowFilter id="console_mark_shadow"
                         blurX="3"
                         blurY="3"
                         quality="15"
                         alpha="0.3"
                         strength="3"
                         color="#000000"/>
    
    <!-- Transitions -->
    <core:transitions>
        <mx:Transition fromState="*" toState="not_logged">
            <mx:Parallel id="console_mark_transition_in">
                <mx:Fade id="login_panel_fade_in"
                         target="{login_panel}"
                         duration="500"
                         alphaFrom="0.0"
                         alphaTo="1.0"/>
                <mx:Fade id="console_mark_fade_in"
                         duration="3000"
                         alphaFrom="0.0"
                         alphaTo="1.0"
                         target="{console_mark}"/>
                <mx:Sequence target="{console_mark}">
                        <mx:Glow duration="1000" 
                            alphaFrom="0.0" alphaTo="0.0" 
                            blurXFrom="0.0" blurXTo="0.0" 
                            blurYFrom="0.0" blurYTo="0.0" 
                            color="0x000000"
                            target="{console_mark}"/>    
                        <mx:Glow duration="500" 
                            alphaFrom="0.0" alphaTo="0.5" 
                            blurXFrom="0.0" blurXTo="15.0" 
                            blurYFrom="0.0" blurYTo="15.0" 
                            color="0x000000"
                            target="{console_mark}"/>
                        <mx:Glow duration="500" 
                            alphaFrom="0.5" alphaTo="0.0" 
                            blurXFrom="15.0" blurXTo="0.0" 
                            blurYFrom="15.0" blurYTo="0.0" 
                            color="0x000000"
                            target="{console_mark}"/>
                </mx:Sequence>
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition fromState="not_logged">
            <mx:Fade id="login_panel_fade_out"
                     target="{login_panel}"
                     duration="2000"
                     alphaFrom="1.0"
                     alphaTo="0.0"/>
        </mx:Transition>
        <mx:Transition toState="logged">
            <mx:Parallel>
                <mx:Fade id="task_bar_fade_in"
                         target="{task_bar}"
                         duration="1500"
                         alphaFrom="0.0"
                         alphaTo="1.0"/>
                <mx:Fade id="modules_list_fade_in"
                         target="{mdiCanvas}"
                         duration="1500"
                         alphaFrom="0.0"
                         alphaTo="1.0"/>
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition fromState="logged">
            <mx:Parallel>
                <mx:Fade id="task_bar_fade_out"
                         target="{task_bar}"
                         duration="3000"
                         alphaFrom="1.0"
                         alphaTo="0.0"/>
                <mx:Fade id="modules_list_fade_out"
                         target="{modules_list}"
                         duration="2000"
                         alphaFrom="0.0"
                         alphaTo="1.0"/>
            </mx:Parallel>
        </mx:Transition>
    </core:transitions>
    
    <!-- States -->
    <core:states>

        <!-- When not logged in -->
        <mx:State name="not_logged"
                  enterState="enterNotLoggedStateHandler(event)">
            <mx:AddChild relativeTo="{application_container}"
                         position="firstChild">
                <mx:target>
                    <!-- Displayed when not logged in -->
                    <mx:VBox id="not_logged_in_container"
                             width="100%"
                             height="100%"
                             verticalAlign="middle"
                             horizontalAlign="center"
                             x="0"
                             y="0">
                        <mx:Panel id="login_panel"
                                  title="Log in to the console"
                                  horizontalAlign="center"
                                  verticalAlign="middle"
                                  backgroundAlpha="0.5"
                                  defaultButton="{loginButton}">
                            <local:LogInPanel id="logInPanel" />
                            <mx:ControlBar horizontalAlign="center">
                                <mx:Button label="Reset"
                                           click="reset()"
                                           focusEnabled="false"/>
                                <mx:Spacer width="100%"/>
                                <mx:Button id="loginButton"
                                           label="Login"
                                           click="logIn()"/>
                            </mx:ControlBar>
                        </mx:Panel>
                    </mx:VBox>
                </mx:target>
            </mx:AddChild>
        </mx:State>
        
        <!-- When logged in -->
        <mx:State name="logged"
                  enterState="enterLoggedStateHandler(event)">
            <mx:AddChild relativeTo="{application_container}"
                         position="lastChild">
                <mx:target>
                    <!-- Displayed when logged in -->
                    <mx:VBox id="logged_in_container"
                             width="100%"
                             height="100%"
                             x="0"
                             y="0">
                        <mx:VBox id="vbox"
                                 width="100%"
                                 height="100%"
                                 paddingLeft="3"
                                 paddingRight="3"
                                 paddingBottom="0"
                                 paddingTop="3">
                            <flexlibMdiContainers:MDICanvas id="mdiCanvas"
                                               horizontalScrollPolicy="off"
                                               verticalScrollPolicy="off"
                                               width="100%"
                                               height="100%"
                                               backgroundColor="#FFFFFF"
                                               backgroundAlpha="0">
                                <mx:TileList id="modules_list"
                                             height="100%"
                                             width="100%"
                                             direction="vertical"
                                             dataProvider="{MainPanel.modules}"
                                             backgroundAlpha="0.0"
                                             borderStyle="none"
                                             useRollOver="false"
                                             itemRenderer="org.ow2.jasmine.kerneos.core.view.ModuleThumb">
                                </mx:TileList>
                            </flexlibMdiContainers:MDICanvas>
                        </mx:VBox>
                        <mx:HBox id="task_bar"
                                 backgroundAlpha="0.5"
                                 backgroundColor="#ABABAB"
                                 width="100%"
                                 height="32"
                                 verticalAlign="middle"
                                 bottom="0"
                                 left="0"
                                 right="0"
                                 paddingLeft="5"
                                 paddingRight="5"
                                 filters="{[taskbar_shadow]}">
                            <mx:Button width="22"
                                       height="22"
                                       icon="{downIcon}"
                                       click="{minimizeAllWindows()}"
                                       toolTip="Minimize all windows"/>
                            
                            <!-- TODO -->
                            <mx:HBox id="minimized_windows"
                                     width="100%"
                                     height="100%"
                                     horizontalAlign="left"
                                     verticalAlign="middle"/>
                            
                            <mx:Spacer width="100%"/>
                            <mx:VRule height="90%"
                                      alpha="0.5"/>
                            <mx:Button width="22"
                                       height="22"
                                       icon="{cascadeIcon}"
                                       click="mdiCanvas.windowManager.cascade()"
                                       toolTip="Cascade windows"/>
                            <mx:Button width="22"
                                       height="22"
                                       icon="{tileIcon}"
                                       click="mdiCanvas.windowManager.tile(true,3)"
                                       toolTip="Tile windows"/>
                            <mx:Button id="fullScreenButton"
                                       width="22"
                                       height="22"
                                       icon="{(fullScreen)?exitFullScreenIcon:fullScreenIcon}"
                                       click="{toggleFullScreen()}"
                                       toolTip="Toggle full screen mode on/off"/>
                            <mx:Button width="22"
                                       height="22"
                                       icon="{logoutIcon}"
                                       click="{logout()}"
                                       toolTip="Logout"/>
                        </mx:HBox>
                    </mx:VBox>
                </mx:target>
            </mx:AddChild>
        </mx:State>
    </core:states>

    <!-- Main application container -->
    <mx:Canvas id="application_container"
               width="100%"
               height="100%">
       <!-- "JASMINe Console" mark" -->
       <mx:HBox id="console_mark"
                width="500"
                height="128"
                top="10"
                right="10"
                verticalAlign="top"
                horizontalAlign="right">
          <mx:Text text="JASMINe"
                   styleName="consoleMark1"
                   filters="{[console_mark_shadow]}"
                   selectable="false"/>
          <mx:Text id="console_mark_right"
                   text="Console"
                   styleName="consoleMark2"
                   filters="{[console_mark_shadow]}"
                   selectable="false"/>
       </mx:HBox>
    </mx:Canvas>
</core:Core>
