<?xml version="1.0" encoding="utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - Kerneos
     - Copyright (C) 2009-2011 Bull S.A.S.
     - Contact: jasmine AT ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
           xmlns:s="library://ns.adobe.com/flex/spark"
           xmlns:mx="library://ns.adobe.com/flex/mx"
           xmlns:control = "org.ow2.kerneos.modules.store.control.*"
           implements = "org.ow2.kerneos.core.api.KerneosModule"
           xmlns:vo="org.ow2.kerneos.modules.store.vo.*"
           layout="absolute" width="100%" height="100%"
           creationComplete="init()">


    <fx:Style>

        @namespace s "library://ns.adobe.com/flex/spark";
        @namespace mx "library://ns.adobe.com/flex/mx";
        @namespace vo "org.ow2.kerneos.modules.store.vo.*";

        .accHead {
            fontSize: 18;
            fontWeight: normal;
        }


    </fx:Style>

    <fx:Declarations>
        <!-- Instantiate the controller. A controller a module -->
        <control:Controller id="controller"/>

       <s:ArrayCollection id="modulesResultList">
            <vo:ModuleVO name="JASMINe Monitoring" author="BULL SAS" version="1.4.2" category="Monitoring"
                       description="Monitoring lets you visualize, analyze and export graph.
						  2 Monitoring lets you visualize, analyze and export graphs. 
						  3 Monitoring lets you visualize, analyze and export graphs. 
						  4 Monitoring lets you visualize, analyze and export graphs. 
						  5 Monitoring lets you visualize, analyze and export graphs. 
						  6 Monitoring lets you visualize, analyze and export graphs. 
						  7 Monitoring lets you visualize, analyze and export graphs."/>
            <vo:ModuleVO name="Probe Manager" author="BULL SAS" version="1.4.0" category="Admin"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"/>
        </s:ArrayCollection>

        <s:ArrayCollection id="modulesSearchResultList">
            <vo:ModuleVO name="JASMINe Monitoring" author="BULL SAS" version="1.4.2" category="Monitoring"
                       description="Monitoring lets you visualize, analyze and export graph.
						  2 Monitoring lets you visualize, analyze and export graphs. 
						  3 Monitoring lets you visualize, analyze and export graphs. 
						  4 Monitoring lets you visualize, analyze and export graphs. 
						  5 Monitoring lets you visualize, analyze and export graphs. 
						  6 Monitoring lets you visualize, analyze and export graphs. 
						  7 Monitoring lets you visualize, analyze and export graphs."/>
            <vo:ModuleVO name="Probe Manager" author="BULL SAS" version="1.4.0" category="Admin"
                       description="Monitoring lets you visualize, analyze and export graph.
						  2 Monitoring lets you visualize, analyze and export graphs. 
						  3 Monitoring lets you visualize, analyze and export graphs. 
						  4 Monitoring lets you visualize, analyze and export graphs. 
						  5 Monitoring lets you visualize, analyze and export graphs. 
						  6 Monitoring lets you visualize, analyze and export graphs. 
						  7 Monitoring lets you visualize, analyze and export graphs."/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"
                       description="Monitoring lets you visualize, analyze and export graph.
						  2 Monitoring lets you visualize, analyze and export graphs. 
						  3 Monitoring lets you visualize, analyze and export graphs. 
						  4 Monitoring lets you visualize, analyze and export graphs. 
						  5 Monitoring lets you visualize, analyze and export graphs. 
						  6 Monitoring lets you visualize, analyze and export graphs. 
						  7 Monitoring lets you visualize, analyze and export graphs."/>
            <vo:ModuleVO name="Module Test" author="Company Name" version="1.0" category="Others"
                       description="Monitoring lets you visualize, analyze and export graph.
						  2 Monitoring lets you visualize, analyze and export graphs. 
						  3 Monitoring lets you visualize, analyze and export graphs. 
						  4 Monitoring lets you visualize, analyze and export graphs. 
						  5 Monitoring lets you visualize, analyze and export graphs. 
						  6 Monitoring lets you visualize, analyze and export graphs. 
						  7 Monitoring lets you visualize, analyze and export graphs."/>

        </s:ArrayCollection>
    </fx:Declarations>

    <mx:states >
        <mx:State name="Default" />
        <mx:State name="ModuleDetail" />
        <mx:State name="InstalledModules" />
        <mx:State name="FindModules" />
    </mx:states>

    <s:Group x="0" y="0" width="100%" height="100%">
        <fx:Script>
			<![CDATA[
            import com.adobe.cairngorm.model.ModelLocator;

            import mx.controls.Alert;
            import mx.events.ListEvent;

            import org.ow2.kerneos.modules.store.event.ChangeSelectedModuleInstallEvent;
            import org.ow2.kerneos.modules.store.event.ChangeStoreStateEvent;
            import org.ow2.kerneos.modules.store.event.GetModuleEvent;

            import org.ow2.kerneos.modules.store.event.ModuleEvent;
            import org.ow2.kerneos.modules.store.event.SearchModulesEvent;
            import org.ow2.kerneos.modules.store.event.StoreEvent;

            import org.ow2.kerneos.modules.store.model.ModuleModelLocator;
            import org.ow2.kerneos.modules.store.vo.ModuleVO;
            import org.ow2.kerneos.modules.store.vo.StoreVO;

            import com.adobe.cairngorm.control.CairngormEventDispatcher;

            import mx.events.ItemClickEvent;
            import mx.collections.ArrayCollection;

           //private var _selectModule:org.ow2.kerneos.modules.store.vo.ModuleVO;

            private var _servicesClasses:Dictionary;

            /**
             * Keywords used to look up for modules
             */
            [Bindable]
            private var _keywords:String;

            // =========================================================================
            // Implementation of KerneosModule
            // =========================================================================


            /**
             * When the module is closed, cut off all client-server communications
             */
            public function closeModule():void {
                ////////////////////////////////////////////////////////////////
                //                                                            //
                //             Action to do when the module is closed         //
                //                                                            //
                ////////////////////////////////////////////////////////////////
                // Remove all the commands to the pool of commands
                controller.removeCommands();
                controller = null;
            }

            public function canBeClosedWithoutPrompt():Boolean {

                ////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                            //
                //             return whether or not a prompt should be shown when closing the module         //
                //                                                                                            //
                ////////////////////////////////////////////////////////////////////////////////////////////////

                return true;
            }

            protected function init():void {
                this.id = "moduleStoreModule";

                /*_selectModule = new org.ow2.kerneos.modules.store.vo.ModuleVO();
                _selectModule.name = "JASMINe Monitoring";
                _selectModule.author = "BULL SAS";
                _selectModule.description = "Monitoring lets you visualize, analyze and export graphs."
                        + "2 Monitoring lets you visualize, analyze and export graphs."
                        + "3 Monitoring lets you visualize, analyze and export graphs."
                        + "4 Monitoring lets you visualize, analyze and export graphs."
                        + "5 Monitoring lets you visualize, analyze and export graphs."
                        + "6 Monitoring lets you visualize, analyze and export graphs."
                        + "7 Monitoring lets you visualize, analyze and export graphs.";

                [Embed(source='/../assets/logo_jasmine_monitoring.png')] var icon:Class;

                _selectModule.icon = icon;
                _selectModule.size = 4000;
                //_selectModule.date = new Date();
                _selectModule.version = "1.4.2";
                _selectModule.category = "Monitoring";
                _selectModule.installsNumber = 1000000;*/

                //Change application state when click on one menu item
                linkBar.addEventListener(ItemClickEvent.ITEM_CLICK, handleLinkBar);

                searchInput.text = "Module's Name..";
                searchInput.addEventListener(FocusEvent.FOCUS_IN, handleSearchInputFocusIn);
                searchInput.addEventListener(FocusEvent.FOCUS_OUT, handleSearchInputFocusOut);

                ModuleModelLocator.getInstance().listeSelectedModules = new ArrayCollection();
                ModuleModelLocator.getInstance().listeModules = new ArrayCollection();

                /*this.addEventListener(SelectedModuleEvent.SELECTED_MODULE_CHANGE, onItemChanged);*/
                var categories : ArrayCollection = new ArrayCollection(["util","util","util","util"]);

                ModuleModelLocator.getInstance().categories = categories;
            }

            private function handleLinkBar(event:ItemClickEvent):void {
                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);
            }

            private function handleSearchInputFocusIn(event:FocusEvent):void {
                searchInput.text = "";
            }

            private function handleSearchInputFocusOut(event:FocusEvent):void {
                if (searchInput.text == "") {
                    searchInput.text = "Module's Name..";
                }
            }

            protected function handleDGInstalledModulesClick(event:ListEvent):void {
                if (event.columnIndex != 0) {
                    (dgInstalledModules.selectedItem as org.ow2.kerneos.modules.store.vo.ModuleVO).selected =
                            !(dgInstalledModules.selectedItem as org.ow2.kerneos.modules.store.vo.ModuleVO).selected;

                    var evt:ChangeSelectedModuleInstallEvent = new ChangeSelectedModuleInstallEvent(
                            ChangeSelectedModuleInstallEvent.SELECTED_MODULE_CHANGE);
                    evt.item = dgInstalledModules.selectedItem;
                    CairngormEventDispatcher.getInstance().dispatchEvent(evt);
                }
            }

            public function chkbxAllSelectHandler(evt:Event):void {
                ModuleModelLocator.getInstance().listeSelectedModules.removeAll();

                for each (var item:Object in modulesResultList) {
                    item.selected = chkbxAllSelect.selected;
                    if (item.selected) {
                        ModuleModelLocator.getInstance().listeSelectedModules.addItem(item);

                    }
                }
                modulesResultList.refresh();
            }

            protected function searchInput_enterHandler():void {
                /*Alert.show("Find modules by word : " + searchInput.text);*/

                _keywords = searchInput.text;
                searchIconButton.setFocus();
                var search_modules_event : SearchModulesEvent = new SearchModulesEvent(SearchModulesEvent.SEARCH_MODULES_WITH_IMAGE);
                search_modules_event.filter = searchInput.text;
                CairngormEventDispatcher.getInstance().dispatchEvent(search_modules_event);

                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "FindModules";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);
            }


            private function handleInstalledModulesState():void {

                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "InstalledModules";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);

                //Dispatch calls to server methods, Test API REST

                var event_module:ModuleEvent = new ModuleEvent(ModuleEvent.GET_MODULE_INFO);
                CairngormEventDispatcher.getInstance().dispatchEvent(event_module);

                var store_event:StoreEvent = new StoreEvent(StoreEvent.GET_STORE);
                store_event.url = "localhost...";
                CairngormEventDispatcher.getInstance().dispatchEvent(store_event);

                var get_module_event:GetModuleEvent = new GetModuleEvent(GetModuleEvent.GET_MODULE);
                get_module_event.id = "apache-commons-io";
                CairngormEventDispatcher.getInstance().dispatchEvent(get_module_event);

                var get_module_image_event:GetModuleEvent = new GetModuleEvent(GetModuleEvent.GET_MODULE_IMAGE);
                get_module_image_event.id = "apache-commons-io";
                CairngormEventDispatcher.getInstance().dispatchEvent(get_module_image_event);

                var search_modules_event:SearchModulesEvent = new SearchModulesEvent(SearchModulesEvent.SEARCH_MODULES);
                search_modules_event.filter = "   Apache    Commons I0 ";
                CairngormEventDispatcher.getInstance().dispatchEvent(search_modules_event);

            }

            /**
             * The message is showed when myData in the ModelLocator is modified,
             * a pop-up with the message is displayed
             */
            private function set newMessage(message:String):void {
                if (message != null) {
                    Alert.show("Store name " + message);
                }
            }

            /**
             * The message is showed when myStoreInfo in the ModelLocator is modified
             */
            private function set newStoreInfo(storeInfo:org.ow2.kerneos.modules.store.vo.StoreVO):void {
                if (storeInfo != null) {
                    /* labelModuleNameTest.text = storeInfo.name;
                     labelModuleDescriptionTest.text = storeInfo.description;
                     labelModuleURLTest.text = storeInfo.url;*/
                }
            }

            /**
             * Change current state when storeState in the ModelLocator is modified
             */
            private function set newStoreState(state:String):void {
                if (state != null) {
                    this.currentState = state;
                }
            }

            /**
             * Test server call getModule
             * @param mainModule
             */
            private function set mainModuleDetail(mainModule:ModuleVO):void {
                if (mainModule != null) {
                    Alert.show("Module Name " + mainModule.name);
                }
            }

            /**
             * Test server call getModule
             * @param mainModule
             */
            private function set testChangeImage(image:Bitmap):void {
                if (image != null) {
                    imageTestBitmap.source = ModuleModelLocator.getInstance().imageTest;
                    imageTestBitmap.visible = true;
                }
            }

            private function searchModulesByCategory(evt:ItemClickEvent):void {
                var category : int = evt.index;
                var categoryName : String = getValidCategory(category);

                var search_modules_event:SearchModulesEvent =
                        new SearchModulesEvent(SearchModulesEvent.SEARCH_MODULES_WITH_IMAGE_BY_CATEGORY);
                search_modules_event.id = categoryName;
                CairngormEventDispatcher.getInstance().dispatchEvent(search_modules_event);
            }

            private function getValidCategory(index:int) : String {
                if (index >= 0 && index < ModuleModelLocator.getInstance().categories.length) {
                    return ModuleModelLocator.getInstance().categories[index];
                } else {
                    return "";
                }
            }

            ]]>
		</fx:Script>

        <!-- Setup button -->
        <s:Button id="setupButton" x="642" y="28" label="Setup" fontSize="18"
                  icon="/../assets/engine_icon.gif"/>

        <!-- Search box and icon -->
        <!-- BUG 02/08/2011 if s:TextInput is used, problem with SoftKeyboardEvent class doesn't found -->
        <s:HGroup x="337" y="28" width="241" height="32" horizontalAlign="center" verticalAlign="top">
            <mx:TextInput id="searchInput" paddingTop="8" fontSize="12" enter="searchInput_enterHandler()" />
            <mx:LinkButton id="searchIconButton" width="34" height="28"
                           click="searchInput_enterHandler()" icon="@Embed('/../assets/Crystal_Clear_app_xmag.png')"
                           paddingLeft="15" paddingRight="0"/>
        </s:HGroup>

        <!-- Installed Modules Button -->
        <s:Button x="14" y="96" width="168" label="Installed" fontSize="18" click="handleInstalledModulesState()" />

        <!-- Categories Menu -->
        <mx:Accordion x="14" y="133" width="168" height="306" label="Categories" fontSize="16"
                      headerStyleName="accHead" textAlign="center"
                      fontWeight="normal">
            <s:NavigatorContent width="100%" height="100%" label="Categories" fontSize="16">
                <mx:LinkBar id="linkBar" width="100%" dataProvider="{mainViewStack}"
                            direction="vertical" verticalGap="8" currentState="" itemClick="searchModulesByCategory(event)"/>
            </s:NavigatorContent>
        </mx:Accordion>

        <!-- Main Conteneur -->
        <s:BorderContainer x="190" y="96" width="553" height="463">
            <mx:ViewStack id="mainViewStack" x="0" y="0" width="551" height="461" >
                <s:NavigatorContent id="navUtilModules" width="100%" height="100%"
                                    label="{ModuleModelLocator.getInstance().categories[0]}">
                    <s:DataGroup id="dgPopularModules" x="0" y="0" width="100%" height="100%"
                                 dataProvider="{ModuleModelLocator.getInstance().listeModules}"
                                 itemRenderer="org.ow2.kerneos.modules.store.view.render.moduleIndexRenderer"
                                 name="dgPopularModules"
                                 visible.Default="true"
                                 visible.ModuleDetail="false"
                                 visible.FindModules="false"
                                 visible.InstalledModules="false">
                        <s:layout>
                            <s:TileLayout columnWidth="128" orientation="rows" requestedColumnCount="4"
                                          requestedRowCount="2" rowHeight="200"/>
                        </s:layout>
                    </s:DataGroup>
                </s:NavigatorContent>


                <s:NavigatorContent id="navMonitoringModules" width="100%" height="100%"
                                    label="{ModuleModelLocator.getInstance().categories[1]}">
                    <s:DataGroup id="dgMonitoringModules" x="0" y="0" width="100%" height="100%"
                                 dataProvider="{ModuleModelLocator.getInstance().listeModules}"
                                 itemRenderer="org.ow2.kerneos.modules.store.view.render.moduleIndexRenderer"
                                 name="dgMonitoringModules"
                                 visible.Default="true"
                                 visible.ModuleDetail="false"
                                 visible.FindModules="false"
                                 visible.InstalledModules="false">
                        <s:layout>
                            <s:TileLayout columnWidth="128" orientation="rows" requestedColumnCount="4"
                                          requestedRowCount="2" rowHeight="200"/>
                        </s:layout>
                    </s:DataGroup>
                </s:NavigatorContent>
                <s:NavigatorContent id="navAdminModules" width="100%" height="100%"
                                    label="{ModuleModelLocator.getInstance().categories[2]}">
                    <s:DataGroup id="dgAdminModules" x="0" y="0" width="100%" height="100%"
                                 dataProvider="{ModuleModelLocator.getInstance().listeModules}"
                                 itemRenderer="org.ow2.kerneos.modules.store.view.render.moduleIndexRenderer"
                                 name="dgAdminModules"
                                 visible.Default="true"
                                 visible.ModuleDetail="false"
                                 visible.FindModules="false"
                                 visible.InstalledModules="false">
                        <s:layout>
                            <s:TileLayout columnWidth="128" orientation="rows" requestedColumnCount="4"
                                          requestedRowCount="2" rowHeight="200"/>
                        </s:layout>
                    </s:DataGroup>
                </s:NavigatorContent>
                <s:NavigatorContent id="navOthersModules" width="100%" height="100%"
                                    label="{ModuleModelLocator.getInstance().categories[3]}">
                    <s:DataGroup id="dgOthersModules" x="0" y="0" width="100%" height="100%"
                                 dataProvider="{ModuleModelLocator.getInstance().listeModules}"
                                 itemRenderer="org.ow2.kerneos.modules.store.view.render.moduleIndexRenderer"
                                 name="dgOthersModules"
                                 visible.Default="true"
                                 visible.ModuleDetail="false"
                                 visible.FindModules="false"
                                 visible.InstalledModules="false">
                        <s:layout>
                            <s:TileLayout columnWidth="128" orientation="rows" requestedColumnCount="4"
                                          requestedRowCount="2" rowHeight="200"/>
                        </s:layout>
                    </s:DataGroup>
                </s:NavigatorContent>
            </mx:ViewStack>

            <!-- Detail module view-->
            <s:Group includeIn="ModuleDetail" x="0" y="0" width="100%" height="100%">
                <s:Label x="142" y="10" width="381" height="21" fontSize="18"
                         fontWeight="bold" text="{ModuleModelLocator.getInstance().mainModule.name}"/>
                <s:Image x="10" y="10" width="128" height="128"
                         source="{ModuleModelLocator.getInstance().mainModule.icon}"/>
                <s:Label x="146" y="39" width="381" height="21" fontSize="14"
                         fontWeight="bold" text="{ModuleModelLocator.getInstance().mainModule.author}"/>
                <s:Label x="146" y="68" width="395" height="99" text="{ModuleModelLocator.getInstance().mainModule.description}"/>
                <s:Button x="40" y="146" label="Install"/>
                <s:Label x="10" y="192" fontSize="18" fontWeight="bold"
                         text="About this module"/>
                <s:Label x="10" y="217" fontSize="14" text="Updated:"/>
                <s:Label x="76" y="217" fontSize="14"
                         text="{ModuleModelLocator.getInstance().mainModule.date.toDateString()}"/>
                <s:Label x="11" y="245" fontSize="14" text="Version:"/>
                <s:Label x="70" y="245" fontSize="14" text="{ModuleModelLocator.getInstance().mainModule.version}"
                         verticalAlign="middle"/>
                <s:Label x="191" y="217" fontSize="14" text="Category:"/>
                <s:Label x="257" y="217" fontSize="14"
                         text="{ModuleModelLocator.getInstance().mainModule.category}"/>
                <s:Label x="191" y="244" fontSize="14" text="Installs:"/>
                <s:Label x="244" y="244" fontSize="14"
                         text="{ModuleModelLocator.getInstance().mainModule.installsNumber}"/>
                <s:Label x="381" y="218" fontSize="14" text="Size:"/>
                <s:Label x="416" y="218" fontSize="14"
                         text="{ModuleModelLocator.getInstance().mainModule.size} Bytes"/>
            </s:Group>

            <!-- Installed Modules View-->
            <s:Group includeIn="InstalledModules" x="0" y="0" width="100%" height="100%" >
                <mx:CheckBox id="chkbxAllSelect" x="63" y="6" width="200"
                             label="{(chkbxAllSelect.selected)?'Deselect All':'Select All'}"
                             change="chkbxAllSelectHandler(event)"/>
                <mx:DataGrid id="dgInstalledModules" x="43" y="42" height="236" dataProvider="{modulesResultList}"
                             itemClick="handleDGInstalledModulesClick(event)">
                    <mx:columns>
                        <mx:DataGridColumn width="60" dataField="selected" headerText="Select" sortable="false"
                                           itemRenderer="org.ow2.kerneos.modules.store.view.render.chkBxRender"></mx:DataGridColumn>
                        <mx:DataGridColumn width="160" dataField="name" headerText="Name" ></mx:DataGridColumn>
                        <mx:DataGridColumn width="110" dataField="version" headerText="Version"></mx:DataGridColumn>
                        <mx:DataGridColumn width="130" dataField="category" headerText="Category"></mx:DataGridColumn>
                    </mx:columns>
                </mx:DataGrid>
                <s:Button x="43" y="329" label="Update" click="Alert.show('Update selected modules');"/>
                <s:Button x="169" y="329" label="Uninstall" click="Alert.show('Uninstall selected modules');"/>
                <mx:Label x="50" y="289" text="{modulesResultList.length + ' result(s) ' +
                ModuleModelLocator.getInstance().listeSelectedModules.length+' selected item(s)' }" />

                <!--TEST APPEL STORE API REST -->
                <!--<mx:Label id="labelModuleNameTest" x="15" y="15" text="" />
                <mx:Label id="labelModuleDescriptionTest" x="15" y="50" text="" />
                <mx:Label id="labelModuleURLTest" x="15" y="85" text="" />-->

                <!-- Test get module image from REST -->
                <s:BitmapImage id="imageTestBitmap" x="300" y="329" source="ModuleModelLocator.getInstance().imageTest"/>

            </s:Group>

            <!-- Find Modules View-->
            <s:Group includeIn="FindModules" x="0" y="0" width="100%" height="100%">
                <s:Label x="10" y="10" text="{ModuleModelLocator.getInstance().listeModules.length} results for &quot; {_keywords} &quot;"/>
                <mx:HRule x="10" y="30" width="531"/>
                <s:DataGroup x="0" y="35" width="545" height="422" dataProvider="{ModuleModelLocator.getInstance().listeModules}"
                             itemRenderer="org.ow2.kerneos.modules.store.view.render.moduleResearchRenderer">
                    <s:layout>
                        <s:VerticalLayout gap="5" requestedRowCount="4" rowHeight="102"
                                          variableRowHeight="false" />
                    </s:layout>
                </s:DataGroup>
            </s:Group>

        </s:BorderContainer>
    </s:Group>

    <fx:Binding source="ModuleModelLocator.getInstance().myDataObj" destination="newMessage"/>

    <fx:Binding source="ModuleModelLocator.getInstance().myStoreInfo" destination="newStoreInfo"/>

    <fx:Binding source="ModuleModelLocator.getInstance().storeState" destination="newStoreState"/>

    <fx:Binding source="ModuleModelLocator.getInstance().mainModule" destination="mainModuleDetail"/>

    <fx:Binding source="ModuleModelLocator.getInstance().imageTest" destination="testChangeImage"/>

</mx:Module>
