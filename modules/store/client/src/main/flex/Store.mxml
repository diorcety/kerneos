<?xml version="1.0" encoding="utf-8"?>
<!--
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     - Kerneos
     - Copyright (C) 2011 Bull S.A.S.
     - Contact: jasmine AT ow2.org
     -
     - This library is free software; you can redistribute it and/or
     - modify it under the terms of the GNU Lesser General Public
     - License as published by the Free Software Foundation; either
     - version 2.1 of the License, or any later version.
     -
     - This library is distributed in the hope that it will be useful,
     - but WITHOUT ANY WARRANTY; without even the implied warranty of
     - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     - Lesser General Public License for more details.
     -
     - You should have received a copy of the GNU Lesser General Public
     - License along with this library; if not, write to the Free Software
     - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
     - USA
     -
     - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
-->
<s:Module xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:control="org.ow2.kerneos.modules.store.control.*"
          xmlns:view="org.ow2.kerneos.modules.store.view.*"
          implements="org.ow2.kerneos.core.api.KerneosModule"
          width="100%" height="100%"
          creationComplete="init()">


    <fx:Style>

        .accHead {
            fontSize: 18;
            fontWeight: normal;
        }


    </fx:Style>

    <fx:Declarations>
        <!-- Instantiate the controller. A controller a module -->
        <control:Controller id="controller"/>
    </fx:Declarations>

    <s:states>
        <s:State name="Default"/>
        <s:State name="ModuleDetail"/>
        <s:State name="InstalledModules"/>
        <s:State name="FindModules"/>
        <s:State name="Setup"/>
    </s:states>

    <s:Group width="100%" height="100%">
        <fx:Script>
			<![CDATA[
            import org.ow2.kerneos.modules.store.event.ChangeStoreStateEvent;
            import org.ow2.kerneos.modules.store.event.GetCategoriesEvent;
            import org.ow2.kerneos.modules.store.event.GetInstalledModulesEvent;
            import org.ow2.kerneos.modules.store.event.GetOrDeleteStoreEvent;
            import org.ow2.kerneos.modules.store.event.SearchModulesEvent;
            import org.ow2.kerneos.modules.store.model.ModuleModelLocator;

            import com.adobe.cairngorm.control.CairngormEventDispatcher;

            import mx.collections.ArrayCollection;

            /**
             * Default search keyword
             */
            private var _defaultSearchText:String = "Module's Name..";

            // =========================================================================
            // Implementation of KerneosModule
            // =========================================================================


            /**
             * When the module is closed, cut off all client-server communications
             */
            public function closeModule():void {
                ////////////////////////////////////////////////////////////////
                //                                                            //
                //             Action to do when the module is closed         //
                //                                                            //
                ////////////////////////////////////////////////////////////////
                // Remove all the commands to the pool of commands
                controller.removeCommands();
                controller = null;

                searchInput.removeEventListener(FocusEvent.FOCUS_IN, handleSearchInputFocusIn);
                searchInput.removeEventListener(FocusEvent.FOCUS_OUT, handleSearchInputFocusOut);
            }

            public function canBeClosedWithoutPrompt():Boolean {

                ////////////////////////////////////////////////////////////////////////////////////////////////
                //                                                                                            //
                //             return whether or not a prompt should be shown when closing the module         //
                //                                                                                            //
                ////////////////////////////////////////////////////////////////////////////////////////////////

                return true;
            }

            protected function init():void {
                this.id = "moduleStoreModule";

                searchInput.text = _defaultSearchText;
                searchInput.addEventListener(FocusEvent.FOCUS_IN, handleSearchInputFocusIn);
                searchInput.addEventListener(FocusEvent.FOCUS_OUT, handleSearchInputFocusOut);

                ModuleModelLocator.getInstance().listSelectedModules = new ArrayCollection();
                ModuleModelLocator.getInstance().listModules = new ArrayCollection();
                ModuleModelLocator.getInstance().listInstalledModules = new ArrayCollection();

                //init stores list
                var get_stores_event:GetOrDeleteStoreEvent = new GetOrDeleteStoreEvent(GetOrDeleteStoreEvent.GET_STORES);
                CairngormEventDispatcher.getInstance().dispatchEvent(get_stores_event);

                var get_categories_event:GetCategoriesEvent = new GetCategoriesEvent(GetCategoriesEvent.GET_CATEGORIES);
                CairngormEventDispatcher.getInstance().dispatchEvent(get_categories_event);
            }

            /**
             *  Change application state when click on one menu item
             */
            private function handleLinkBar(event:MouseEvent):void {
                if (this.currentState != "" || this.currentState != "Default") {
                    var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                    evt.state = "Default";
                    CairngormEventDispatcher.getInstance().dispatchEvent(evt);
                }
            }

            private function handleSearchInputFocusIn(event:FocusEvent):void {
                searchInput.text = "";
            }

            private function handleSearchInputFocusOut(event:FocusEvent):void {
                if (searchInput.text == "") {
                    searchInput.text = this._defaultSearchText;
                }
            }

            private function searchInput_enterHandler():void {
                var _keywords:String = searchInput.text;
                searchIconButton.setFocus();

                if (_keywords != "") {
                    var pattern:RegExp = /[\w\d:#%\/;$()~_?\\\-=.&+]+/g;
                    var words:Array = _keywords.match(pattern);

                    if (words != null && words[0] != null) {
                        _keywords = words[0];
                    } else {
                        _keywords = "";
                    }
                }

                var search_modules_event:SearchModulesEvent = new SearchModulesEvent(SearchModulesEvent.SEARCH_MODULES_WITH_IMAGE);
                search_modules_event.filter = _keywords;
                ModuleModelLocator.getInstance().keywords = _keywords;
                CairngormEventDispatcher.getInstance().dispatchEvent(search_modules_event);

                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "FindModules";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);
            }


            private function handleInstalledModulesState():void {
                var getInstalledModulesEvent:GetInstalledModulesEvent = new GetInstalledModulesEvent(GetInstalledModulesEvent.GET_INSTALLED_MODULES);
                CairngormEventDispatcher.getInstance().dispatchEvent(getInstalledModulesEvent);

                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "InstalledModules";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);
            }

            /**
             * Change current state when storeState in the ModelLocator is modified
             */
            private function set newStoreState(state:String):void {
                if (state != null) {
                    this.currentState = state;
                }
            }

            /**
             * Change the current state to Setup
             */
            private function handleSetupState():void {
                var get_stores_event:GetOrDeleteStoreEvent = new GetOrDeleteStoreEvent(GetOrDeleteStoreEvent.GET_STORES);
                CairngormEventDispatcher.getInstance().dispatchEvent(get_stores_event);

                var evt:ChangeStoreStateEvent = new ChangeStoreStateEvent(ChangeStoreStateEvent.CHANGE_MODULE_STATE);
                evt.state = "Setup";
                CairngormEventDispatcher.getInstance().dispatchEvent(evt);
            }
            ]]>
		</fx:Script>

        <s:layout>
            <s:VerticalLayout verticalAlign="middle"/>
        </s:layout>

        <s:HGroup paddingTop="10" width="100%" height="35" horizontalAlign="center">
            <!-- Search box and icon -->
            <s:HGroup x="337" width="241" height="32" horizontalAlign="center" verticalAlign="top">
                <s:TextInput id="searchInput" paddingTop="8" fontSize="12" enter="searchInput_enterHandler()"/>
                <s:Button id="searchIconButton" width="34" height="28" click="searchInput_enterHandler()"
                          icon="@Embed('/../assets/Crystal_Clear_app_xmag.png')"/>
            </s:HGroup>

            <!-- Setup button -->
            <s:Button id="setupButton" x="642" label="Setup" fontSize="18" icon="/../assets/engine_icon.gif"
                    click="handleSetupState()"/>
        </s:HGroup>

        <s:HGroup width="100%" height="97%" horizontalAlign="left">
            <s:VGroup width="140" height="100%">
                <!-- Installed Modules Button -->
                <s:Button width="90%" label="Installed" fontSize="18" click="handleInstalledModulesState()"/>

                <!-- Categories Menu -->
                <s:List id="categoriesListMenu" borderVisible="false" contentBackgroundAlpha="0"
                        dataProvider="{ModuleModelLocator.getInstance().categories}"
                        itemRenderer="org.ow2.kerneos.modules.store.view.render.CategoriesMenuRenderer"
                        click="handleLinkBar(event)"/>
            </s:VGroup>


            <!-- Main Conteneur -->
            <s:BorderContainer width="80%" height="95%">
                <!-- Main modules view -->
                <view:ModulesMainView includeIn="Default" width="100%" height="100%"/>

                <!-- Detail module view-->
                <view:DetailModuleView includeIn="ModuleDetail" width="100%" height="100%"/>

                <!-- Installed Modules View-->
                <view:InstalledView includeIn="InstalledModules" width="100%" height="100%"/>

                <!-- Find Modules View-->
                <view:FindView includeIn="FindModules" width="100%" height="100%"/>

                <!-- Setup View -->
                <view:SetupView includeIn="Setup" width="100%" height="100%"/>
            </s:BorderContainer>
        </s:HGroup>

    </s:Group>

    <fx:Binding source="ModuleModelLocator.getInstance().storeState" destination="newStoreState"/>

</s:Module>
